// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("main.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 StructType *StructTy_class_std__ios_base__Init = mod->getTypeByName("class.std::ios_base::Init");
 if (!StructTy_class_std__ios_base__Init) {
 StructTy_class_std__ios_base__Init = StructType::create(mod->getContext(), "class.std::ios_base::Init");
 }
 std::vector<Type*>StructTy_class_std__ios_base__Init_fields;
 StructTy_class_std__ios_base__Init_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_std__ios_base__Init->isOpaque()) {
 StructTy_class_std__ios_base__Init->setBody(StructTy_class_std__ios_base__Init_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_0 = PointerType::get(StructTy_class_std__ios_base__Init, 0);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 ArrayType* ArrayTy_2 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 27);
 
 PointerType* PointerTy_3 = PointerType::get(ArrayTy_2, 0);
 
 ArrayType* ArrayTy_4 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 8);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 ArrayType* ArrayTy_6 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 5);
 
 PointerType* PointerTy_7 = PointerType::get(ArrayTy_6, 0);
 
 ArrayType* ArrayTy_9 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 PointerType* PointerTy_8 = PointerType::get(ArrayTy_9, 0);
 
 std::vector<Type*>StructTy_11_fields;
 StructTy_11_fields.push_back(IntegerType::get(mod->getContext(), 32));
 std::vector<Type*>FuncTy_13_args;
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);
 
 StructTy_11_fields.push_back(PointerTy_12);
 StructTy_11_fields.push_back(PointerTy_1);
 StructType *StructTy_11 = StructType::get(mod->getContext(), StructTy_11_fields, /*isPacked=*/false);
 
 ArrayType* ArrayTy_10 = ArrayType::get(StructTy_11, 1);
 
 PointerType* PointerTy_14 = PointerType::get(ArrayTy_10, 0);
 
 std::vector<Type*>FuncTy_15_args;
 FuncTy_15_args.push_back(PointerTy_0);
 FunctionType* FuncTy_15 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_15_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_16_args;
 std::vector<Type*>FuncTy_18_args;
 FuncTy_18_args.push_back(PointerTy_1);
 FunctionType* FuncTy_18 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_18_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_17 = PointerType::get(FuncTy_18, 0);
 
 FuncTy_16_args.push_back(PointerTy_17);
 FuncTy_16_args.push_back(PointerTy_1);
 FuncTy_16_args.push_back(PointerTy_1);
 FunctionType* FuncTy_16 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_16_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
 if (!StructTy_struct_timespec) {
 StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
 }
 std::vector<Type*>StructTy_struct_timespec_fields;
 StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
 if (StructTy_struct_timespec->isOpaque()) {
 StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_19 = PointerType::get(StructTy_struct_timespec, 0);
 
 std::vector<Type*>FuncTy_21_args;
 FuncTy_21_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_21_args.push_back(PointerTy_1);
 FunctionType* FuncTy_21 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_21_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_20 = PointerType::get(FuncTy_21, 0);
 
 PointerType* PointerTy_22 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 std::vector<Type*>FuncTy_24_args;
 FuncTy_24_args.push_back(PointerTy_19);
 FuncTy_24_args.push_back(PointerTy_19);
 FunctionType* FuncTy_24 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_24_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_23 = PointerType::get(FuncTy_24, 0);
 
 std::vector<Type*>FuncTy_25_args;
 FuncTy_25_args.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_26 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 FuncTy_25_args.push_back(PointerTy_26);
 FuncTy_25_args.push_back(PointerTy_26);
 FunctionType* FuncTy_25 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_25_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_class_std__allocator = mod->getTypeByName("class.std::allocator");
 if (!StructTy_class_std__allocator) {
 StructTy_class_std__allocator = StructType::create(mod->getContext(), "class.std::allocator");
 }
 std::vector<Type*>StructTy_class_std__allocator_fields;
 StructTy_class_std__allocator_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_std__allocator->isOpaque()) {
 StructTy_class_std__allocator->setBody(StructTy_class_std__allocator_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_27 = PointerType::get(StructTy_class_std__allocator, 0);
 
 StructType *StructTy_class_std__basic_string = mod->getTypeByName("class.std::basic_string");
 if (!StructTy_class_std__basic_string) {
 StructTy_class_std__basic_string = StructType::create(mod->getContext(), "class.std::basic_string");
 }
 std::vector<Type*>StructTy_class_std__basic_string_fields;
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields;
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields.push_back(PointerTy_1);
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields, /*isPacked=*/false);
 }
 
 StructTy_class_std__basic_string_fields.push_back(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider);
 if (StructTy_class_std__basic_string->isOpaque()) {
 StructTy_class_std__basic_string->setBody(StructTy_class_std__basic_string_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_28 = PointerType::get(StructTy_class_std__basic_string, 0);
 
 std::vector<Type*>FuncTy_30_args;
 FuncTy_30_args.push_back(PointerTy_28);
 FuncTy_30_args.push_back(PointerTy_1);
 FuncTy_30_args.push_back(PointerTy_27);
 FunctionType* FuncTy_30 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_30_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_29 = PointerType::get(FuncTy_30, 0);
 
 std::vector<Type*>FuncTy_32_args;
 FuncTy_32_args.push_back(PointerTy_28);
 FuncTy_32_args.push_back(PointerTy_28);
 FunctionType* FuncTy_32 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_32_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_31 = PointerType::get(FuncTy_32, 0);
 
 StructType *StructTy_class_IWrapper = mod->getTypeByName("class.IWrapper");
 if (!StructTy_class_IWrapper) {
 StructTy_class_IWrapper = StructType::create(mod->getContext(), "class.IWrapper");
 }
 std::vector<Type*>StructTy_class_IWrapper_fields;
 std::vector<Type*>FuncTy_36_args;
 FunctionType* FuncTy_36 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_36_args,
  /*isVarArg=*/true);
 
 PointerType* PointerTy_35 = PointerType::get(FuncTy_36, 0);
 
 PointerType* PointerTy_34 = PointerType::get(PointerTy_35, 0);
 
 StructTy_class_IWrapper_fields.push_back(PointerTy_34);
 if (StructTy_class_IWrapper->isOpaque()) {
 StructTy_class_IWrapper->setBody(StructTy_class_IWrapper_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_33 = PointerType::get(StructTy_class_IWrapper, 0);
 
 std::vector<Type*>FuncTy_38_args;
 FuncTy_38_args.push_back(PointerTy_28);
 FuncTy_38_args.push_back(PointerTy_28);
 FuncTy_38_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_38 = FunctionType::get(
  /*Result=*/PointerTy_33,
  /*Params=*/FuncTy_38_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_37 = PointerType::get(FuncTy_38, 0);
 
 PointerType* PointerTy_39 = PointerType::get(PointerTy_1, 0);
 
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields;
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields;
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields.push_back(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base);
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_40 = PointerType::get(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep, 0);
 
 std::vector<Type*>FuncTy_42_args;
 FuncTy_42_args.push_back(PointerTy_40);
 FuncTy_42_args.push_back(PointerTy_27);
 FunctionType* FuncTy_42 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_42_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_41 = PointerType::get(FuncTy_42, 0);
 
 std::vector<Type*>FuncTy_44_args;
 FuncTy_44_args.push_back(PointerTy_33);
 FuncTy_44_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_44 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_44_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_43 = PointerType::get(FuncTy_44, 0);
 
 std::vector<Type*>StructTy_45_fields;
 StructTy_45_fields.push_back(PointerTy_1);
 StructTy_45_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_45 = StructType::get(mod->getContext(), StructTy_45_fields, /*isPacked=*/false);
 
 std::vector<Type*>FuncTy_46_args;
 FuncTy_46_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_46_args.push_back(PointerTy_39);
 FunctionType* FuncTy_46 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_46_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_47 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_49_args;
 FunctionType* FuncTy_49 = FunctionType::get(
  /*Result=*/PointerTy_47,
  /*Params=*/FuncTy_49_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_48 = PointerType::get(FuncTy_49, 0);
 
 std::vector<Type*>FuncTy_51_args;
 FuncTy_51_args.push_back(PointerTy_1);
 FuncTy_51_args.push_back(PointerTy_39);
 FuncTy_51_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_51 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_51_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_50 = PointerType::get(FuncTy_51, 0);
 
 std::vector<Type*>FuncTy_53_args;
 FuncTy_53_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_53 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_53_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_52 = PointerType::get(FuncTy_53, 0);
 
 PointerType* PointerTy_54 = PointerType::get(FuncTy_25, 0);
 
 std::vector<Type*>FuncTy_55_args;
 FuncTy_55_args.push_back(PointerTy_47);
 FuncTy_55_args.push_back(PointerTy_17);
 FunctionType* FuncTy_55 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_55_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_56 = PointerType::get(FuncTy_15, 0);
 
 PointerType* PointerTy_57 = PointerType::get(FuncTy_16, 0);
 
 
 // Function Declarations
 
 Function* func__ZNSt8ios_base4InitC1Ev = mod->getFunction("_ZNSt8ios_base4InitC1Ev");
 if (!func__ZNSt8ios_base4InitC1Ev) {
 func__ZNSt8ios_base4InitC1Ev = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitC1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitC1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitC1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitC1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitC1Ev->setAttributes(func__ZNSt8ios_base4InitC1Ev_PAL);
 
 Function* func__ZNSt8ios_base4InitD1Ev = mod->getFunction("_ZNSt8ios_base4InitD1Ev");
 if (!func__ZNSt8ios_base4InitD1Ev) {
 func__ZNSt8ios_base4InitD1Ev = Function::Create(
  /*Type=*/FuncTy_15,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitD1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitD1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitD1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitD1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitD1Ev->setAttributes(func__ZNSt8ios_base4InitD1Ev_PAL);
 
 Function* func___cxa_atexit = mod->getFunction("__cxa_atexit");
 if (!func___cxa_atexit) {
 func___cxa_atexit = Function::Create(
  /*Type=*/FuncTy_16,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__cxa_atexit", mod); // (external, no body)
 func___cxa_atexit->setCallingConv(CallingConv::C);
 }
 AttributeSet func___cxa_atexit_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___cxa_atexit_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___cxa_atexit->setAttributes(func___cxa_atexit_PAL);
 
 Function* func__Z19doesNothingButSleepv = mod->getFunction("_Z19doesNothingButSleepv");
 if (!func__Z19doesNothingButSleepv) {
 func__Z19doesNothingButSleepv = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z19doesNothingButSleepv", mod); 
 func__Z19doesNothingButSleepv->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z19doesNothingButSleepv_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z19doesNothingButSleepv_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z19doesNothingButSleepv->setAttributes(func__Z19doesNothingButSleepv_PAL);
 
 Function* func__Z12testFunctioniPdS_ = mod->getFunction("_Z12testFunctioniPdS_");
 if (!func__Z12testFunctioniPdS_) {
 func__Z12testFunctioniPdS_ = Function::Create(
  /*Type=*/FuncTy_25,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z12testFunctioniPdS_", mod); 
 func__Z12testFunctioniPdS_->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z12testFunctioniPdS__PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ReadOnly);
    B.addAttribute(Attribute::NoCapture);
    PAS = AttributeSet::get(mod->getContext(), 2U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__Z12testFunctioniPdS__PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__Z12testFunctioniPdS_->setAttributes(func__Z12testFunctioniPdS__PAL);

Function* func_llvm_lifetime_start = mod->getFunction("llvm.lifetime.start");
if (!func_llvm_lifetime_start) {
func_llvm_lifetime_start = Function::Create(
 /*Type=*/FuncTy_21,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.start", mod); // (external, no body)
func_llvm_lifetime_start->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_start_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_start_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_start->setAttributes(func_llvm_lifetime_start_PAL);

Function* func__ZNSsC1EPKcRKSaIcE = mod->getFunction("_ZNSsC1EPKcRKSaIcE");
if (!func__ZNSsC1EPKcRKSaIcE) {
func__ZNSsC1EPKcRKSaIcE = Function::Create(
 /*Type=*/FuncTy_30,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSsC1EPKcRKSaIcE", mod); // (external, no body)
func__ZNSsC1EPKcRKSaIcE->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSsC1EPKcRKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSsC1EPKcRKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSsC1EPKcRKSaIcE->setAttributes(func__ZNSsC1EPKcRKSaIcE_PAL);

Function* func___gxx_personality_v0 = mod->getFunction("__gxx_personality_v0");
if (!func___gxx_personality_v0) {
func___gxx_personality_v0 = Function::Create(
 /*Type=*/FuncTy_36,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"__gxx_personality_v0", mod); // (external, no body)
func___gxx_personality_v0->setCallingConv(CallingConv::C);
}
AttributeSet func___gxx_personality_v0_PAL;
func___gxx_personality_v0->setAttributes(func___gxx_personality_v0_PAL);

Function* func__Z40_metric_capture_long_double_timer_setup_SsSsi = mod->getFunction("_Z40_metric_capture_long_double_timer_setup_SsSsi");
if (!func__Z40_metric_capture_long_double_timer_setup_SsSsi) {
func__Z40_metric_capture_long_double_timer_setup_SsSsi = Function::Create(
 /*Type=*/FuncTy_38,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Z40_metric_capture_long_double_timer_setup_SsSsi", mod); // (external, no body)
func__Z40_metric_capture_long_double_timer_setup_SsSsi->setCallingConv(CallingConv::C);
}
AttributeSet func__Z40_metric_capture_long_double_timer_setup_SsSsi_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__Z40_metric_capture_long_double_timer_setup_SsSsi_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__Z40_metric_capture_long_double_timer_setup_SsSsi->setAttributes(func__Z40_metric_capture_long_double_timer_setup_SsSsi_PAL);

Function* func__ZNSsC1ERKSs = mod->getFunction("_ZNSsC1ERKSs");
if (!func__ZNSsC1ERKSs) {
func__ZNSsC1ERKSs = Function::Create(
 /*Type=*/FuncTy_32,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSsC1ERKSs", mod); // (external, no body)
func__ZNSsC1ERKSs->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSsC1ERKSs_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSsC1ERKSs_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSsC1ERKSs->setAttributes(func__ZNSsC1ERKSs_PAL);

Function* func__Z22_metric_capture_start_P8IWrapperi = mod->getFunction("_Z22_metric_capture_start_P8IWrapperi");
if (!func__Z22_metric_capture_start_P8IWrapperi) {
func__Z22_metric_capture_start_P8IWrapperi = Function::Create(
 /*Type=*/FuncTy_44,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Z22_metric_capture_start_P8IWrapperi", mod); // (external, no body)
func__Z22_metric_capture_start_P8IWrapperi->setCallingConv(CallingConv::C);
}
AttributeSet func__Z22_metric_capture_start_P8IWrapperi_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__Z22_metric_capture_start_P8IWrapperi_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__Z22_metric_capture_start_P8IWrapperi->setAttributes(func__Z22_metric_capture_start_P8IWrapperi_PAL);

Function* func__Z21_metric_capture_stop_P8IWrapperi = mod->getFunction("_Z21_metric_capture_stop_P8IWrapperi");
if (!func__Z21_metric_capture_stop_P8IWrapperi) {
func__Z21_metric_capture_stop_P8IWrapperi = Function::Create(
 /*Type=*/FuncTy_44,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Z21_metric_capture_stop_P8IWrapperi", mod); // (external, no body)
func__Z21_metric_capture_stop_P8IWrapperi->setCallingConv(CallingConv::C);
}
AttributeSet func__Z21_metric_capture_stop_P8IWrapperi_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__Z21_metric_capture_stop_P8IWrapperi_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__Z21_metric_capture_stop_P8IWrapperi->setAttributes(func__Z21_metric_capture_stop_P8IWrapperi_PAL);

Function* func_llvm_lifetime_end = mod->getFunction("llvm.lifetime.end");
if (!func_llvm_lifetime_end) {
func_llvm_lifetime_end = Function::Create(
 /*Type=*/FuncTy_21,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.end", mod); // (external, no body)
func_llvm_lifetime_end->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_end_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_end_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_end->setAttributes(func_llvm_lifetime_end_PAL);

Function* func_main = mod->getFunction("main");
if (!func_main) {
func_main = Function::Create(
 /*Type=*/FuncTy_46,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"main", mod); 
func_main->setCallingConv(CallingConv::C);
}
AttributeSet func_main_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_main->setAttributes(func_main_PAL);

Function* func__Znam = mod->getFunction("_Znam");
if (!func__Znam) {
func__Znam = Function::Create(
 /*Type=*/FuncTy_53,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Znam", mod); // (external, no body)
func__Znam->setCallingConv(CallingConv::C);
}
AttributeSet func__Znam_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__Znam_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__Znam->setAttributes(func__Znam_PAL);

Function* func__ZdaPv = mod->getFunction("_ZdaPv");
if (!func__ZdaPv) {
func__ZdaPv = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZdaPv", mod); // (external, no body)
func__ZdaPv->setCallingConv(CallingConv::C);
}
AttributeSet func__ZdaPv_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZdaPv_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZdaPv->setAttributes(func__ZdaPv_PAL);

Function* func_strtol = mod->getFunction("strtol");
if (!func_strtol) {
func_strtol = Function::Create(
 /*Type=*/FuncTy_51,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strtol", mod); // (external, no body)
func_strtol->setCallingConv(CallingConv::C);
}
AttributeSet func_strtol_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::OptimizeForSize);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_strtol_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_strtol->setAttributes(func_strtol_PAL);

Function* func___errno_location = mod->getFunction("__errno_location");
if (!func___errno_location) {
func___errno_location = Function::Create(
 /*Type=*/FuncTy_49,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"__errno_location", mod); // (external, no body)
func___errno_location->setCallingConv(CallingConv::C);
}
AttributeSet func___errno_location_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func___errno_location_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func___errno_location->setAttributes(func___errno_location_PAL);

Function* func__ZSt24__throw_invalid_argumentPKc = mod->getFunction("_ZSt24__throw_invalid_argumentPKc");
if (!func__ZSt24__throw_invalid_argumentPKc) {
func__ZSt24__throw_invalid_argumentPKc = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZSt24__throw_invalid_argumentPKc", mod); // (external, no body)
func__ZSt24__throw_invalid_argumentPKc->setCallingConv(CallingConv::C);
}
AttributeSet func__ZSt24__throw_invalid_argumentPKc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZSt24__throw_invalid_argumentPKc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZSt24__throw_invalid_argumentPKc->setAttributes(func__ZSt24__throw_invalid_argumentPKc_PAL);

Function* func__ZSt20__throw_out_of_rangePKc = mod->getFunction("_ZSt20__throw_out_of_rangePKc");
if (!func__ZSt20__throw_out_of_rangePKc) {
func__ZSt20__throw_out_of_rangePKc = Function::Create(
 /*Type=*/FuncTy_18,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZSt20__throw_out_of_rangePKc", mod); // (external, no body)
func__ZSt20__throw_out_of_rangePKc->setCallingConv(CallingConv::C);
}
AttributeSet func__ZSt20__throw_out_of_rangePKc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZSt20__throw_out_of_rangePKc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZSt20__throw_out_of_rangePKc->setAttributes(func__ZSt20__throw_out_of_rangePKc_PAL);

Function* func__ZNSs4_Rep10_M_disposeERKSaIcE = mod->getFunction("_ZNSs4_Rep10_M_disposeERKSaIcE");
if (!func__ZNSs4_Rep10_M_disposeERKSaIcE) {
func__ZNSs4_Rep10_M_disposeERKSaIcE = Function::Create(
 /*Type=*/FuncTy_42,
 /*Linkage=*/GlobalValue::AvailableExternallyLinkage ,
 /*Name=*/"_ZNSs4_Rep10_M_disposeERKSaIcE", mod); 
func__ZNSs4_Rep10_M_disposeERKSaIcE->setCallingConv(CallingConv::C);
func__ZNSs4_Rep10_M_disposeERKSaIcE->setAlignment(2);
}
AttributeSet func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSs4_Rep10_M_disposeERKSaIcE->setAttributes(func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL);

Function* func__ZNSs4_Rep10_M_destroyERKSaIcE = mod->getFunction("_ZNSs4_Rep10_M_destroyERKSaIcE");
if (!func__ZNSs4_Rep10_M_destroyERKSaIcE) {
func__ZNSs4_Rep10_M_destroyERKSaIcE = Function::Create(
 /*Type=*/FuncTy_42,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSs4_Rep10_M_destroyERKSaIcE", mod); // (external, no body)
func__ZNSs4_Rep10_M_destroyERKSaIcE->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSs4_Rep10_M_destroyERKSaIcE->setAttributes(func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL);

Function* func___pthread_key_create = mod->getFunction("__pthread_key_create");
if (!func___pthread_key_create) {
func___pthread_key_create = Function::Create(
 /*Type=*/FuncTy_55,
 /*Linkage=*/GlobalValue::ExternalWeakLinkage,
 /*Name=*/"__pthread_key_create", mod); // (external, no body)
func___pthread_key_create->setCallingConv(CallingConv::C);
}
AttributeSet func___pthread_key_create_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func___pthread_key_create_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func___pthread_key_create->setAttributes(func___pthread_key_create_PAL);

Function* func_nanosleep = mod->getFunction("nanosleep");
if (!func_nanosleep) {
func_nanosleep = Function::Create(
 /*Type=*/FuncTy_24,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"nanosleep", mod); // (external, no body)
func_nanosleep->setCallingConv(CallingConv::C);
}
AttributeSet func_nanosleep_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_nanosleep_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_nanosleep->setAttributes(func_nanosleep_PAL);

Function* func__GLOBAL__sub_I_main_cpp = mod->getFunction("_GLOBAL__sub_I_main.cpp");
if (!func__GLOBAL__sub_I_main_cpp) {
func__GLOBAL__sub_I_main_cpp = Function::Create(
 /*Type=*/FuncTy_13,
 /*Linkage=*/GlobalValue::InternalLinkage,
 /*Name=*/"_GLOBAL__sub_I_main.cpp", mod); 
func__GLOBAL__sub_I_main_cpp->setCallingConv(CallingConv::C);
func__GLOBAL__sub_I_main_cpp->setSection(".text.startup");
}
AttributeSet func__GLOBAL__sub_I_main_cpp_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__GLOBAL__sub_I_main_cpp_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__GLOBAL__sub_I_main_cpp->setAttributes(func__GLOBAL__sub_I_main_cpp_PAL);

// Global Variable Declarations


GlobalVariable* gvar_struct__ZStL8__ioinit = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/StructTy_class_std__ios_base__Init,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::InternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"_ZStL8__ioinit");
gvar_struct__ZStL8__ioinit->setAlignment(1);

GlobalVariable* gvar_int8___dso_handle = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 8),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"__dso_handle");

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_2,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_4,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str1");
gvar_array__str1->setAlignment(1);

GlobalVariable* gvar_array__str2 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_6,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str2");
gvar_array__str2->setAlignment(1);

GlobalVariable* gvar_array__ZNSs4_Rep20_S_empty_rep_storageE = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_9,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"_ZNSs4_Rep20_S_empty_rep_storageE");
gvar_array__ZNSs4_Rep20_S_empty_rep_storageE->setAlignment(8);

GlobalVariable* gvar_array_llvm_global_ctors = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_10,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::AppendingLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"llvm.global_ctors");

// Constant Definitions
ConstantAggregateZero* const_struct_58 = ConstantAggregateZero::get(StructTy_class_std__ios_base__Init);
Constant *const_array_59 = ConstantDataArray::getString(mod->getContext(), "abcdefghijklmnopkrstuvwxyz", true);
Constant *const_array_60 = ConstantDataArray::getString(mod->getContext(), "abcdefg", true);
Constant *const_array_61 = ConstantDataArray::getString(mod->getContext(), "stoi", true);
std::vector<Constant*> const_array_62_elems;
std::vector<Constant*> const_struct_63_fields;
ConstantInt* const_int32_64 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("65535"), 10));
const_struct_63_fields.push_back(const_int32_64);
const_struct_63_fields.push_back(func__GLOBAL__sub_I_main_cpp);
ConstantPointerNull* const_ptr_65 = ConstantPointerNull::get(PointerTy_1);
const_struct_63_fields.push_back(const_ptr_65);
Constant* const_struct_63 = ConstantStruct::get(StructTy_11, const_struct_63_fields);
const_array_62_elems.push_back(const_struct_63);
Constant* const_array_62 = ConstantArray::get(ArrayTy_10, const_array_62_elems);
ConstantInt* const_int32_66 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int64_67 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("16"), 10));
ConstantInt* const_int64_68 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int32_69 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int64_70 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
ConstantPointerNull* const_ptr_71 = ConstantPointerNull::get(PointerTy_19);
ConstantInt* const_int64_72 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("8"), 10));
std::vector<Constant*> const_ptr_73_indices;
const_ptr_73_indices.push_back(const_int64_68);
const_ptr_73_indices.push_back(const_int64_68);
Constant* const_ptr_73 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_73_indices);
ConstantInt* const_int32_74 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("5"), 10));
ConstantInt* const_int64_75 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-24"), 10));
ConstantPointerNull* const_ptr_76 = ConstantPointerNull::get(PointerTy_33);
Constant* const_ptr_77 = ConstantExpr::getCast(Instruction::BitCast, func___gxx_personality_v0, PointerTy_1);
ConstantFP* const_double_78 = ConstantFP::get(mod->getContext(), APFloat(0.000000e+00));
UndefValue* const_struct_79 = UndefValue::get(StructTy_45);
ConstantInt* const_int32_80 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
std::vector<Constant*> const_ptr_81_indices;
const_ptr_81_indices.push_back(const_int64_68);
const_ptr_81_indices.push_back(const_int64_68);
Constant* const_ptr_81 = ConstantExpr::getGetElementPtr(gvar_array__str2, const_ptr_81_indices);
ConstantInt* const_int32_82 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("34"), 10));
ConstantInt* const_int64_83 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("2147483648"), 10));
ConstantInt* const_int64_84 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("4294967295"), 10));
ConstantInt* const_int64_85 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("3"), 10));
ConstantInt* const_int64_86 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("34359738360"), 10));
std::vector<Constant*> const_ptr_87_indices;
const_ptr_87_indices.push_back(const_int64_68);
const_ptr_87_indices.push_back(const_int64_68);
Constant* const_ptr_87 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_87_indices);
Constant* const_ptr_88 = ConstantExpr::getCast(Instruction::BitCast, gvar_array__ZNSs4_Rep20_S_empty_rep_storageE, PointerTy_40);
ConstantInt* const_int32_89 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
Constant* const_ptr_91 = ConstantExpr::getCast(Instruction::BitCast, func___pthread_key_create, PointerTy_1);
Constant* const_int1_90 = ConstantExpr::getICmp(ICmpInst::ICMP_NEconst_ptr_91, const_ptr_65);
ConstantInt* const_int32_92 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("-1"), 10));
Constant* const_ptr_93 = ConstantExpr::getCast(Instruction::BitCast, func__ZNSt8ios_base4InitD1Ev, PointerTy_17);
std::vector<Constant*> const_ptr_94_indices;
const_ptr_94_indices.push_back(const_int64_68);
const_ptr_94_indices.push_back(const_int32_69);
Constant* const_ptr_94 = ConstantExpr::getGetElementPtr(gvar_struct__ZStL8__ioinit, const_ptr_94_indices);

// Global Variable Definitions
gvar_struct__ZStL8__ioinit->setInitializer(const_struct_58);
gvar_array__str->setInitializer(const_array_59);
gvar_array__str1->setInitializer(const_array_60);
gvar_array__str2->setInitializer(const_array_61);
gvar_array_llvm_global_ctors->setInitializer(const_array_62);

// Function Definitions

// Function: _Z19doesNothingButSleepv (func__Z19doesNothingButSleepv)
{
 
 BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func__Z19doesNothingButSleepv,0);
 
 // Block entry (label_entry)
 AllocaInst* ptr___ts_i = new AllocaInst(StructTy_struct_timespec, "__ts.i", label_entry);
 ptr___ts_i->setAlignment(8);
 CastInst* ptr_95 = new BitCastInst(ptr___ts_i, PointerTy_1, "", label_entry);
 std::vector<Value*> void_96_params;
 void_96_params.push_back(const_int64_67);
 void_96_params.push_back(ptr_95);
 CallInst* void_96 = CallInst::Create(func_llvm_lifetime_start, void_96_params, "", label_entry);
 void_96->setCallingConv(CallingConv::C);
 void_96->setTailCall(false);
 AttributeSet void_96_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_96_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_96->setAttributes(void_96_PAL);
 
 std::vector<Value*> ptr_tv_sec_i_indices;
 ptr_tv_sec_i_indices.push_back(const_int64_68);
 ptr_tv_sec_i_indices.push_back(const_int32_69);
 Instruction* ptr_tv_sec_i = GetElementPtrInst::Create(ptr___ts_i, ptr_tv_sec_i_indices, "tv_sec.i", label_entry);
 StoreInst* void_97 = new StoreInst(const_int64_70, ptr_tv_sec_i, false, label_entry);
 void_97->setAlignment(8);
 std::vector<Value*> ptr_tv_nsec_i_indices;
 ptr_tv_nsec_i_indices.push_back(const_int64_68);
 ptr_tv_nsec_i_indices.push_back(const_int32_66);
 Instruction* ptr_tv_nsec_i = GetElementPtrInst::Create(ptr___ts_i, ptr_tv_nsec_i_indices, "tv_nsec.i", label_entry);
 StoreInst* void_98 = new StoreInst(const_int64_68, ptr_tv_nsec_i, false, label_entry);
 void_98->setAlignment(8);
 std::vector<Value*> int32_call7_i_params;
 int32_call7_i_params.push_back(ptr___ts_i);
 int32_call7_i_params.push_back(const_ptr_71);
 CallInst* int32_call7_i = CallInst::Create(func_nanosleep, int32_call7_i_params, "call7.i", label_entry);
 int32_call7_i->setCallingConv(CallingConv::C);
 int32_call7_i->setTailCall(false);
 AttributeSet int32_call7_i_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call7_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call7_i->setAttributes(int32_call7_i_PAL);
 
 std::vector<Value*> void_99_params;
 void_99_params.push_back(const_int64_67);
 void_99_params.push_back(ptr_95);
 CallInst* void_99 = CallInst::Create(func_llvm_lifetime_end, void_99_params, "", label_entry);
 void_99->setCallingConv(CallingConv::C);
 void_99->setTailCall(false);
 AttributeSet void_99_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_99_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_99->setAttributes(void_99_PAL);
 
 ReturnInst::Create(mod->getContext(), label_entry);
 
}

// Function: _Z12testFunctioniPdS_ (func__Z12testFunctioniPdS_)
{
 Function::arg_iterator args = func__Z12testFunctioniPdS_->arg_begin();
 Value* int32_d = args++;
 int32_d->setName("d");
 Value* ptr_S = args++;
 ptr_S->setName("S");
 Value* ptr_D = args++;
 ptr_D->setName("D");
 
 BasicBlock* label_entry_101 = BasicBlock::Create(mod->getContext(), "entry",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_invoke_cont = BasicBlock::Create(mod->getContext(), "invoke.cont",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_invoke_cont2 = BasicBlock::Create(mod->getContext(), "invoke.cont2",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_invoke_cont5 = BasicBlock::Create(mod->getContext(), "invoke.cont5",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_invoke_cont7 = BasicBlock::Create(mod->getContext(), "invoke.cont7",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_invoke_cont8 = BasicBlock::Create(mod->getContext(), "invoke.cont8",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_preheader = BasicBlock::Create(mod->getContext(), "for.cond.preheader",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond10_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond10.preheader.lr.ph",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_loopexit = BasicBlock::Create(mod->getContext(), "for.cond.loopexit",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond14_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond14.preheader.lr.ph",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_cleanup = BasicBlock::Create(mod->getContext(), "for.cond.cleanup",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_lpad = BasicBlock::Create(mod->getContext(), "lpad",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_lpad1 = BasicBlock::Create(mod->getContext(), "lpad1",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_lpad4 = BasicBlock::Create(mod->getContext(), "lpad4",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_lpad6 = BasicBlock::Create(mod->getContext(), "lpad6",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_ehcleanup = BasicBlock::Create(mod->getContext(), "ehcleanup",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond14_preheader = BasicBlock::Create(mod->getContext(), "for.cond14.preheader",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_cleanup12 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup12",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond42_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond42.preheader.lr.ph",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_cleanup16 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup16",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_body17 = BasicBlock::Create(mod->getContext(), "for.body17",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond42_preheader = BasicBlock::Create(mod->getContext(), "for.cond42.preheader",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_cond_cleanup44 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup44",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_for_body45 = BasicBlock::Create(mod->getContext(), "for.body45",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_ehcleanup78 = BasicBlock::Create(mod->getContext(), "ehcleanup78",func__Z12testFunctioniPdS_,0);
 BasicBlock* label_eh_resume = BasicBlock::Create(mod->getContext(), "eh.resume",func__Z12testFunctioniPdS_,0);
 
 // Block entry (label_entry_101)
 AllocaInst* ptr_ref_tmp_i146 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i146", label_entry_101);
 ptr_ref_tmp_i146->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i143 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i143", label_entry_101);
 ptr_ref_tmp_i143->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i140 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i140", label_entry_101);
 ptr_ref_tmp_i140->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i137 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i137", label_entry_101);
 ptr_ref_tmp_i137->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i134 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i134", label_entry_101);
 ptr_ref_tmp_i134->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i", label_entry_101);
 ptr_ref_tmp_i->setAlignment(1);
 AllocaInst* ptr_funcName = new AllocaInst(StructTy_class_std__basic_string, "funcName", label_entry_101);
 ptr_funcName->setAlignment(8);
 AllocaInst* ptr_ref_tmp = new AllocaInst(StructTy_class_std__allocator, "ref.tmp", label_entry_101);
 ptr_ref_tmp->setAlignment(1);
 AllocaInst* ptr_agg_tmp = new AllocaInst(StructTy_class_std__basic_string, "agg.tmp", label_entry_101);
 ptr_agg_tmp->setAlignment(8);
 AllocaInst* ptr_agg_tmp3 = new AllocaInst(StructTy_class_std__basic_string, "agg.tmp3", label_entry_101);
 ptr_agg_tmp3->setAlignment(8);
 CastInst* ptr_102 = new BitCastInst(ptr_funcName, PointerTy_1, "", label_entry_101);
 std::vector<Value*> void_103_params;
 void_103_params.push_back(const_int64_72);
 void_103_params.push_back(ptr_102);
 CallInst* void_103 = CallInst::Create(func_llvm_lifetime_start, void_103_params, "", label_entry_101);
 void_103->setCallingConv(CallingConv::C);
 void_103->setTailCall(false);
 AttributeSet void_103_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_103_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_103->setAttributes(void_103_PAL);
 
 std::vector<Value*> void_104_params;
 void_104_params.push_back(ptr_funcName);
 void_104_params.push_back(const_ptr_73);
 void_104_params.push_back(ptr_ref_tmp);
 InvokeInst *void_104 = InvokeInst::Create(func__ZNSsC1EPKcRKSaIcE, label_invoke_cont, label_lpad, void_104_params, "", label_entry_101);
 void_104->setCallingConv(CallingConv::C);AttributeSet void_104_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_104_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_104->setAttributes(void_104_PAL);


// Block invoke.cont (label_invoke_cont)
std::vector<Value*> void_105_params;
void_105_params.push_back(ptr_agg_tmp);
void_105_params.push_back(ptr_funcName);
InvokeInst *void_105 = InvokeInst::Create(func__ZNSsC1ERKSs, label_invoke_cont2, label_lpad1, void_105_params, "", label_invoke_cont);
void_105->setCallingConv(CallingConv::C);AttributeSet void_105_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_105_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_105->setAttributes(void_105_PAL);


// Block invoke.cont2 (label_invoke_cont2)
std::vector<Value*> void_106_params;
void_106_params.push_back(ptr_agg_tmp3);
void_106_params.push_back(ptr_funcName);
InvokeInst *void_106 = InvokeInst::Create(func__ZNSsC1ERKSs, label_invoke_cont5, label_lpad4, void_106_params, "", label_invoke_cont2);
void_106->setCallingConv(CallingConv::C);AttributeSet void_106_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_106_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_106->setAttributes(void_106_PAL);


// Block invoke.cont5 (label_invoke_cont5)
std::vector<Value*> ptr_call_params;
ptr_call_params.push_back(ptr_agg_tmp);
ptr_call_params.push_back(ptr_agg_tmp3);
ptr_call_params.push_back(const_int32_74);
InvokeInst *ptr_call = InvokeInst::Create(func__Z40_metric_capture_long_double_timer_setup_SsSsi, label_invoke_cont7, label_lpad6, ptr_call_params, "call", label_invoke_cont5);
ptr_call->setCallingConv(CallingConv::C);AttributeSet ptr_call_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call->setAttributes(ptr_call_PAL);


// Block invoke.cont7 (label_invoke_cont7)
std::vector<Value*> ptr_107_indices;
ptr_107_indices.push_back(const_int64_68);
ptr_107_indices.push_back(const_int32_69);
Instruction* ptr_107 = GetElementPtrInst::Create(ptr_ref_tmp_i137, ptr_107_indices, "", label_invoke_cont7);
std::vector<Value*> void_108_params;
void_108_params.push_back(const_int64_70);
void_108_params.push_back(ptr_107);
CallInst* void_108 = CallInst::Create(func_llvm_lifetime_start, void_108_params, "", label_invoke_cont7);
void_108->setCallingConv(CallingConv::C);
void_108->setTailCall(false);
AttributeSet void_108_PAL;
void_108->setAttributes(void_108_PAL);

std::vector<Value*> ptr__M_p_i_i_i138_indices;
ptr__M_p_i_i_i138_indices.push_back(const_int64_68);
ptr__M_p_i_i_i138_indices.push_back(const_int32_69);
ptr__M_p_i_i_i138_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i138 = GetElementPtrInst::Create(ptr_agg_tmp3, ptr__M_p_i_i_i138_indices, "_M_p.i.i.i138", label_invoke_cont7);
LoadInst* ptr_109 = new LoadInst(ptr__M_p_i_i_i138, "", false, label_invoke_cont7);
ptr_109->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i139 = GetElementPtrInst::Create(ptr_109, const_int64_75, "arrayidx.i.i139", label_invoke_cont7);
CastInst* ptr_110 = new BitCastInst(ptr_arrayidx_i_i139, PointerTy_40, "", label_invoke_cont7);
std::vector<Value*> void_111_params;
void_111_params.push_back(ptr_110);
void_111_params.push_back(ptr_ref_tmp_i137);
CallInst* void_111 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_111_params, "", label_invoke_cont7);
void_111->setCallingConv(CallingConv::C);
void_111->setTailCall(false);
AttributeSet void_111_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_111_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_111->setAttributes(void_111_PAL);

std::vector<Value*> void_112_params;
void_112_params.push_back(const_int64_70);
void_112_params.push_back(ptr_107);
CallInst* void_112 = CallInst::Create(func_llvm_lifetime_end, void_112_params, "", label_invoke_cont7);
void_112->setCallingConv(CallingConv::C);
void_112->setTailCall(false);
AttributeSet void_112_PAL;
void_112->setAttributes(void_112_PAL);

std::vector<Value*> ptr_113_indices;
ptr_113_indices.push_back(const_int64_68);
ptr_113_indices.push_back(const_int32_69);
Instruction* ptr_113 = GetElementPtrInst::Create(ptr_ref_tmp_i140, ptr_113_indices, "", label_invoke_cont7);
std::vector<Value*> void_114_params;
void_114_params.push_back(const_int64_70);
void_114_params.push_back(ptr_113);
CallInst* void_114 = CallInst::Create(func_llvm_lifetime_start, void_114_params, "", label_invoke_cont7);
void_114->setCallingConv(CallingConv::C);
void_114->setTailCall(false);
AttributeSet void_114_PAL;
void_114->setAttributes(void_114_PAL);

std::vector<Value*> ptr__M_p_i_i_i141_indices;
ptr__M_p_i_i_i141_indices.push_back(const_int64_68);
ptr__M_p_i_i_i141_indices.push_back(const_int32_69);
ptr__M_p_i_i_i141_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i141 = GetElementPtrInst::Create(ptr_agg_tmp, ptr__M_p_i_i_i141_indices, "_M_p.i.i.i141", label_invoke_cont7);
LoadInst* ptr_115 = new LoadInst(ptr__M_p_i_i_i141, "", false, label_invoke_cont7);
ptr_115->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i142 = GetElementPtrInst::Create(ptr_115, const_int64_75, "arrayidx.i.i142", label_invoke_cont7);
CastInst* ptr_116 = new BitCastInst(ptr_arrayidx_i_i142, PointerTy_40, "", label_invoke_cont7);
std::vector<Value*> void_117_params;
void_117_params.push_back(ptr_116);
void_117_params.push_back(ptr_ref_tmp_i140);
CallInst* void_117 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_117_params, "", label_invoke_cont7);
void_117->setCallingConv(CallingConv::C);
void_117->setTailCall(false);
AttributeSet void_117_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_117_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_117->setAttributes(void_117_PAL);

std::vector<Value*> void_118_params;
void_118_params.push_back(const_int64_70);
void_118_params.push_back(ptr_113);
CallInst* void_118 = CallInst::Create(func_llvm_lifetime_end, void_118_params, "", label_invoke_cont7);
void_118->setCallingConv(CallingConv::C);
void_118->setTailCall(false);
AttributeSet void_118_PAL;
void_118->setAttributes(void_118_PAL);

std::vector<Value*> void_119_params;
void_119_params.push_back(const_ptr_76);
void_119_params.push_back(const_int32_69);
InvokeInst *void_119 = InvokeInst::Create(func__Z22_metric_capture_start_P8IWrapperi, label_invoke_cont8, label_lpad1, void_119_params, "", label_invoke_cont7);
void_119->setCallingConv(CallingConv::C);AttributeSet void_119_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_119_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_119->setAttributes(void_119_PAL);


// Block invoke.cont8 (label_invoke_cont8)
std::vector<Value*> void_120_params;
void_120_params.push_back(const_ptr_76);
void_120_params.push_back(const_int32_69);
InvokeInst *void_120 = InvokeInst::Create(func__Z21_metric_capture_stop_P8IWrapperi, label_for_cond_preheader, label_lpad1, void_120_params, "", label_invoke_cont8);
void_120->setCallingConv(CallingConv::C);AttributeSet void_120_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_120_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_120->setAttributes(void_120_PAL);


// Block for.cond.preheader (label_for_cond_preheader)
ICmpInst* int1_cmp163 = new ICmpInst(*label_for_cond_preheader, ICmpInst::ICMP_SGT, int32_d, const_int32_69, "cmp163");
BranchInst::Create(label_for_cond10_preheader_lr_ph, label_for_cond_cleanup, int1_cmp163, label_for_cond_preheader);

// Block for.cond10.preheader.lr.ph (label_for_cond10_preheader_lr_ph)
CastInst* int64_122 = new SExtInst(int32_d, IntegerType::get(mod->getContext(), 64), "", label_for_cond10_preheader_lr_ph);
BranchInst::Create(label_for_cond14_preheader_lr_ph, label_for_cond10_preheader_lr_ph);

// Block for.cond.loopexit (label_for_cond_loopexit)
Argument* fwdref_124 = new Argument(IntegerType::get(mod->getContext(), 64));
BinaryOperator* int64_indvars_iv_next188 = BinaryOperator::Create(Instruction::Add, fwdref_124, const_int64_70, "indvars.iv.next188", label_for_cond_loopexit);
Argument* fwdref_125 = new Argument(IntegerType::get(mod->getContext(), 64));
CastInst* int32_lftr_wideiv198 = new TruncInst(fwdref_125, IntegerType::get(mod->getContext(), 32), "lftr.wideiv198", label_for_cond_loopexit);
ICmpInst* int1_exitcond199 = new ICmpInst(*label_for_cond_loopexit, ICmpInst::ICMP_EQ, int32_lftr_wideiv198, int32_d, "exitcond199");
BranchInst::Create(label_for_cond_cleanup, label_for_cond14_preheader_lr_ph, int1_exitcond199, label_for_cond_loopexit);

// Block for.cond14.preheader.lr.ph (label_for_cond14_preheader_lr_ph)
PHINode* int64_indvars_iv195 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv195", label_for_cond14_preheader_lr_ph);
int64_indvars_iv195->addIncoming(const_int64_68, label_for_cond10_preheader_lr_ph);
int64_indvars_iv195->addIncoming(fwdref_125, label_for_cond_loopexit);

PHINode* int64_indvars_iv187 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv187", label_for_cond14_preheader_lr_ph);
int64_indvars_iv187->addIncoming(const_int64_70, label_for_cond10_preheader_lr_ph);
int64_indvars_iv187->addIncoming(int64_indvars_iv_next188, label_for_cond_loopexit);

Argument* fwdref_127 = new Argument(IntegerType::get(mod->getContext(), 32));
PHINode* int32_indvars_iv183 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "indvars.iv183", label_for_cond14_preheader_lr_ph);
int32_indvars_iv183->addIncoming(const_int32_69, label_for_cond10_preheader_lr_ph);
int32_indvars_iv183->addIncoming(fwdref_127, label_for_cond_loopexit);

ICmpInst* int1_cmp15149 = new ICmpInst(*label_for_cond14_preheader_lr_ph, ICmpInst::ICMP_SGT, int64_indvars_iv195, const_int64_68, "cmp15149");
BranchInst::Create(label_for_cond14_preheader, label_for_cond14_preheader_lr_ph);

// Block for.cond.cleanup (label_for_cond_cleanup)
std::vector<Value*> ptr_129_indices;
ptr_129_indices.push_back(const_int64_68);
ptr_129_indices.push_back(const_int32_69);
Instruction* ptr_129 = GetElementPtrInst::Create(ptr_ref_tmp_i143, ptr_129_indices, "", label_for_cond_cleanup);
std::vector<Value*> void_130_params;
void_130_params.push_back(const_int64_70);
void_130_params.push_back(ptr_129);
CallInst* void_130 = CallInst::Create(func_llvm_lifetime_start, void_130_params, "", label_for_cond_cleanup);
void_130->setCallingConv(CallingConv::C);
void_130->setTailCall(false);
AttributeSet void_130_PAL;
void_130->setAttributes(void_130_PAL);

std::vector<Value*> ptr__M_p_i_i_i144_indices;
ptr__M_p_i_i_i144_indices.push_back(const_int64_68);
ptr__M_p_i_i_i144_indices.push_back(const_int32_69);
ptr__M_p_i_i_i144_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i144 = GetElementPtrInst::Create(ptr_funcName, ptr__M_p_i_i_i144_indices, "_M_p.i.i.i144", label_for_cond_cleanup);
LoadInst* ptr_131 = new LoadInst(ptr__M_p_i_i_i144, "", false, label_for_cond_cleanup);
ptr_131->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i145 = GetElementPtrInst::Create(ptr_131, const_int64_75, "arrayidx.i.i145", label_for_cond_cleanup);
CastInst* ptr_132 = new BitCastInst(ptr_arrayidx_i_i145, PointerTy_40, "", label_for_cond_cleanup);
std::vector<Value*> void_133_params;
void_133_params.push_back(ptr_132);
void_133_params.push_back(ptr_ref_tmp_i143);
CallInst* void_133 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_133_params, "", label_for_cond_cleanup);
void_133->setCallingConv(CallingConv::C);
void_133->setTailCall(false);
AttributeSet void_133_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_133_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_133->setAttributes(void_133_PAL);

std::vector<Value*> void_134_params;
void_134_params.push_back(const_int64_70);
void_134_params.push_back(ptr_129);
CallInst* void_134 = CallInst::Create(func_llvm_lifetime_end, void_134_params, "", label_for_cond_cleanup);
void_134->setCallingConv(CallingConv::C);
void_134->setTailCall(false);
AttributeSet void_134_PAL;
void_134->setAttributes(void_134_PAL);

std::vector<Value*> void_135_params;
void_135_params.push_back(const_int64_72);
void_135_params.push_back(ptr_102);
CallInst* void_135 = CallInst::Create(func_llvm_lifetime_end, void_135_params, "", label_for_cond_cleanup);
void_135->setCallingConv(CallingConv::C);
void_135->setTailCall(false);
AttributeSet void_135_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_135_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_135->setAttributes(void_135_PAL);

ReturnInst::Create(mod->getContext(), label_for_cond_cleanup);

// Block lpad (label_lpad)
LandingPadInst* struct_137 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad);
struct_137->setCleanup(true);
std::vector<unsigned> ptr_138_indices;
ptr_138_indices.push_back(0);
ExtractValueInst* ptr_138 = ExtractValueInst::Create(struct_137, ptr_138_indices, "", label_lpad);
std::vector<unsigned> int32_139_indices;
int32_139_indices.push_back(1);
ExtractValueInst* int32_139 = ExtractValueInst::Create(struct_137, int32_139_indices, "", label_lpad);
BranchInst::Create(label_eh_resume, label_lpad);

// Block lpad1 (label_lpad1)
LandingPadInst* struct_141 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad1);
struct_141->setCleanup(true);
std::vector<unsigned> ptr_142_indices;
ptr_142_indices.push_back(0);
ExtractValueInst* ptr_142 = ExtractValueInst::Create(struct_141, ptr_142_indices, "", label_lpad1);
std::vector<unsigned> int32_143_indices;
int32_143_indices.push_back(1);
ExtractValueInst* int32_143 = ExtractValueInst::Create(struct_141, int32_143_indices, "", label_lpad1);
BranchInst::Create(label_ehcleanup78, label_lpad1);

// Block lpad4 (label_lpad4)
LandingPadInst* struct_145 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad4);
struct_145->setCleanup(true);
std::vector<unsigned> ptr_146_indices;
ptr_146_indices.push_back(0);
ExtractValueInst* ptr_146 = ExtractValueInst::Create(struct_145, ptr_146_indices, "", label_lpad4);
std::vector<unsigned> int32_147_indices;
int32_147_indices.push_back(1);
ExtractValueInst* int32_147 = ExtractValueInst::Create(struct_145, int32_147_indices, "", label_lpad4);
BranchInst::Create(label_ehcleanup, label_lpad4);

// Block lpad6 (label_lpad6)
LandingPadInst* struct_149 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad6);
struct_149->setCleanup(true);
std::vector<unsigned> ptr_150_indices;
ptr_150_indices.push_back(0);
ExtractValueInst* ptr_150 = ExtractValueInst::Create(struct_149, ptr_150_indices, "", label_lpad6);
std::vector<unsigned> int32_151_indices;
int32_151_indices.push_back(1);
ExtractValueInst* int32_151 = ExtractValueInst::Create(struct_149, int32_151_indices, "", label_lpad6);
std::vector<Value*> ptr_152_indices;
ptr_152_indices.push_back(const_int64_68);
ptr_152_indices.push_back(const_int32_69);
Instruction* ptr_152 = GetElementPtrInst::Create(ptr_ref_tmp_i146, ptr_152_indices, "", label_lpad6);
std::vector<Value*> void_153_params;
void_153_params.push_back(const_int64_70);
void_153_params.push_back(ptr_152);
CallInst* void_153 = CallInst::Create(func_llvm_lifetime_start, void_153_params, "", label_lpad6);
void_153->setCallingConv(CallingConv::C);
void_153->setTailCall(false);
AttributeSet void_153_PAL;
void_153->setAttributes(void_153_PAL);

std::vector<Value*> ptr__M_p_i_i_i147_indices;
ptr__M_p_i_i_i147_indices.push_back(const_int64_68);
ptr__M_p_i_i_i147_indices.push_back(const_int32_69);
ptr__M_p_i_i_i147_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i147 = GetElementPtrInst::Create(ptr_agg_tmp3, ptr__M_p_i_i_i147_indices, "_M_p.i.i.i147", label_lpad6);
LoadInst* ptr_154 = new LoadInst(ptr__M_p_i_i_i147, "", false, label_lpad6);
ptr_154->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i148 = GetElementPtrInst::Create(ptr_154, const_int64_75, "arrayidx.i.i148", label_lpad6);
CastInst* ptr_155 = new BitCastInst(ptr_arrayidx_i_i148, PointerTy_40, "", label_lpad6);
std::vector<Value*> void_156_params;
void_156_params.push_back(ptr_155);
void_156_params.push_back(ptr_ref_tmp_i146);
CallInst* void_156 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_156_params, "", label_lpad6);
void_156->setCallingConv(CallingConv::C);
void_156->setTailCall(false);
AttributeSet void_156_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_156_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_156->setAttributes(void_156_PAL);

std::vector<Value*> void_157_params;
void_157_params.push_back(const_int64_70);
void_157_params.push_back(ptr_152);
CallInst* void_157 = CallInst::Create(func_llvm_lifetime_end, void_157_params, "", label_lpad6);
void_157->setCallingConv(CallingConv::C);
void_157->setTailCall(false);
AttributeSet void_157_PAL;
void_157->setAttributes(void_157_PAL);

BranchInst::Create(label_ehcleanup, label_lpad6);

// Block ehcleanup (label_ehcleanup)
PHINode* ptr_exn_slot_0 = PHINode::Create(PointerTy_1, 2, "exn.slot.0", label_ehcleanup);
ptr_exn_slot_0->addIncoming(ptr_150, label_lpad6);
ptr_exn_slot_0->addIncoming(ptr_146, label_lpad4);

PHINode* int32_ehselector_slot_0 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "ehselector.slot.0", label_ehcleanup);
int32_ehselector_slot_0->addIncoming(int32_151, label_lpad6);
int32_ehselector_slot_0->addIncoming(int32_147, label_lpad4);

std::vector<Value*> ptr_159_indices;
ptr_159_indices.push_back(const_int64_68);
ptr_159_indices.push_back(const_int32_69);
Instruction* ptr_159 = GetElementPtrInst::Create(ptr_ref_tmp_i134, ptr_159_indices, "", label_ehcleanup);
std::vector<Value*> void_160_params;
void_160_params.push_back(const_int64_70);
void_160_params.push_back(ptr_159);
CallInst* void_160 = CallInst::Create(func_llvm_lifetime_start, void_160_params, "", label_ehcleanup);
void_160->setCallingConv(CallingConv::C);
void_160->setTailCall(false);
AttributeSet void_160_PAL;
void_160->setAttributes(void_160_PAL);

std::vector<Value*> ptr__M_p_i_i_i135_indices;
ptr__M_p_i_i_i135_indices.push_back(const_int64_68);
ptr__M_p_i_i_i135_indices.push_back(const_int32_69);
ptr__M_p_i_i_i135_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i135 = GetElementPtrInst::Create(ptr_agg_tmp, ptr__M_p_i_i_i135_indices, "_M_p.i.i.i135", label_ehcleanup);
LoadInst* ptr_161 = new LoadInst(ptr__M_p_i_i_i135, "", false, label_ehcleanup);
ptr_161->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i136 = GetElementPtrInst::Create(ptr_161, const_int64_75, "arrayidx.i.i136", label_ehcleanup);
CastInst* ptr_162 = new BitCastInst(ptr_arrayidx_i_i136, PointerTy_40, "", label_ehcleanup);
std::vector<Value*> void_163_params;
void_163_params.push_back(ptr_162);
void_163_params.push_back(ptr_ref_tmp_i134);
CallInst* void_163 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_163_params, "", label_ehcleanup);
void_163->setCallingConv(CallingConv::C);
void_163->setTailCall(false);
AttributeSet void_163_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_163_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_163->setAttributes(void_163_PAL);

std::vector<Value*> void_164_params;
void_164_params.push_back(const_int64_70);
void_164_params.push_back(ptr_159);
CallInst* void_164 = CallInst::Create(func_llvm_lifetime_end, void_164_params, "", label_ehcleanup);
void_164->setCallingConv(CallingConv::C);
void_164->setTailCall(false);
AttributeSet void_164_PAL;
void_164->setAttributes(void_164_PAL);

BranchInst::Create(label_ehcleanup78, label_ehcleanup);

// Block for.cond14.preheader (label_for_cond14_preheader)
Argument* fwdref_166 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv172 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv172", label_for_cond14_preheader);
int64_indvars_iv172->addIncoming(int64_indvars_iv195, label_for_cond14_preheader_lr_ph);
int64_indvars_iv172->addIncoming(fwdref_166, label_for_cond_cleanup16);

BinaryOperator* int64_167 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv172, int64_122, "", label_for_cond14_preheader);
BranchInst::Create(label_for_body17, label_for_cond_cleanup16, int1_cmp15149, label_for_cond14_preheader);

// Block for.cond.cleanup12 (label_for_cond_cleanup12)
BinaryOperator* int64_indvars_iv_next196 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv195, const_int64_70, "indvars.iv.next196", label_for_cond_cleanup12);
BinaryOperator* int32_indvars_iv_next184 = BinaryOperator::Create(Instruction::Add, int32_indvars_iv183, const_int32_66, "indvars.iv.next184", label_for_cond_cleanup12);
ICmpInst* int1_cmp37160 = new ICmpInst(*label_for_cond_cleanup12, ICmpInst::ICMP_SLT, int64_indvars_iv_next196, int64_122, "cmp37160");
BranchInst::Create(label_for_cond42_preheader_lr_ph, label_for_cond_loopexit, int1_cmp37160, label_for_cond_cleanup12);

// Block for.cond42.preheader.lr.ph (label_for_cond42_preheader_lr_ph)
ICmpInst* int1_cmp43155 = new ICmpInst(*label_for_cond42_preheader_lr_ph, ICmpInst::ICMP_SGT, int64_indvars_iv195, const_int64_68, "cmp43155");
BinaryOperator* int64_170 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv195, int64_122, "", label_for_cond42_preheader_lr_ph);
BinaryOperator* int32_mul46 = BinaryOperator::Create(Instruction::Mul, int32_indvars_iv183, int32_d, "mul46", label_for_cond42_preheader_lr_ph);
CastInst* int32_171 = new TruncInst(int64_indvars_iv195, IntegerType::get(mod->getContext(), 32), "", label_for_cond42_preheader_lr_ph);
BinaryOperator* int32_add65 = BinaryOperator::Create(Instruction::Add, int32_mul46, int32_171, "add65", label_for_cond42_preheader_lr_ph);
CastInst* int64_idxprom66 = new SExtInst(int32_add65, IntegerType::get(mod->getContext(), 64), "idxprom66", label_for_cond42_preheader_lr_ph);
GetElementPtrInst* ptr_arrayidx67 = GetElementPtrInst::Create(ptr_D, int64_idxprom66, "arrayidx67", label_for_cond42_preheader_lr_ph);
BranchInst::Create(label_for_cond42_preheader, label_for_cond42_preheader_lr_ph);

// Block for.cond.cleanup16 (label_for_cond_cleanup16)
Argument* fwdref_173 = new Argument(Type::getDoubleTy(mod->getContext()));
PHINode* double_sum_0_lcssa = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum.0.lcssa", label_for_cond_cleanup16);
double_sum_0_lcssa->addIncoming(const_double_78, label_for_cond14_preheader);
double_sum_0_lcssa->addIncoming(fwdref_173, label_for_body17);

BinaryOperator* int64_174 = BinaryOperator::Create(Instruction::Add, int64_167, int64_indvars_iv195, "", label_for_cond_cleanup16);
GetElementPtrInst* ptr_arrayidx27 = GetElementPtrInst::Create(ptr_S, int64_174, "arrayidx27", label_for_cond_cleanup16);
LoadInst* double_175 = new LoadInst(ptr_arrayidx27, "", false, label_for_cond_cleanup16);
double_175->setAlignment(8);
BinaryOperator* double_sub = BinaryOperator::Create(Instruction::FSub, double_175, double_sum_0_lcssa, "sub", label_for_cond_cleanup16);
GetElementPtrInst* ptr_arrayidx31 = GetElementPtrInst::Create(ptr_D, int64_174, "arrayidx31", label_for_cond_cleanup16);
StoreInst* void_176 = new StoreInst(double_sub, ptr_arrayidx31, false, label_for_cond_cleanup16);
void_176->setAlignment(8);
BinaryOperator* int64_indvars_iv_next173 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv172, const_int64_70, "indvars.iv.next173", label_for_cond_cleanup16);
CastInst* int32_lftr_wideiv176 = new TruncInst(int64_indvars_iv_next173, IntegerType::get(mod->getContext(), 32), "lftr.wideiv176", label_for_cond_cleanup16);
ICmpInst* int1_exitcond177 = new ICmpInst(*label_for_cond_cleanup16, ICmpInst::ICMP_EQ, int32_lftr_wideiv176, int32_d, "exitcond177");
BranchInst::Create(label_for_cond_cleanup12, label_for_cond14_preheader, int1_exitcond177, label_for_cond_cleanup16);

// Block for.body17 (label_for_body17)
Argument* fwdref_178 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv", label_for_body17);
int64_indvars_iv->addIncoming(fwdref_178, label_for_body17);
int64_indvars_iv->addIncoming(const_int64_68, label_for_cond14_preheader);

PHINode* double_sum_0150 = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum.0150", label_for_body17);
double_sum_0150->addIncoming(fwdref_173, label_for_body17);
double_sum_0150->addIncoming(const_double_78, label_for_cond14_preheader);

BinaryOperator* int64_179 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv, int64_167, "", label_for_body17);
GetElementPtrInst* ptr_arrayidx = GetElementPtrInst::Create(ptr_D, int64_179, "arrayidx", label_for_body17);
LoadInst* double_180 = new LoadInst(ptr_arrayidx, "", false, label_for_body17);
double_180->setAlignment(8);
BinaryOperator* int64_181 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv, int64_122, "", label_for_body17);
BinaryOperator* int64_182 = BinaryOperator::Create(Instruction::Add, int64_181, int64_indvars_iv195, "", label_for_body17);
GetElementPtrInst* ptr_arrayidx21 = GetElementPtrInst::Create(ptr_D, int64_182, "arrayidx21", label_for_body17);
LoadInst* double_183 = new LoadInst(ptr_arrayidx21, "", false, label_for_body17);
double_183->setAlignment(8);
BinaryOperator* double_mul22 = BinaryOperator::Create(Instruction::FMul, double_180, double_183, "mul22", label_for_body17);
BinaryOperator* double_add23 = BinaryOperator::Create(Instruction::FAdd, double_sum_0150, double_mul22, "add23", label_for_body17);
BinaryOperator* int64_indvars_iv_next = BinaryOperator::Create(Instruction::Add, int64_indvars_iv, const_int64_70, "indvars.iv.next", label_for_body17);
CastInst* int32_lftr_wideiv = new TruncInst(int64_indvars_iv_next, IntegerType::get(mod->getContext(), 32), "lftr.wideiv", label_for_body17);
ICmpInst* int1_exitcond = new ICmpInst(*label_for_body17, ICmpInst::ICMP_EQ, int32_lftr_wideiv, int32_indvars_iv183, "exitcond");
BranchInst::Create(label_for_cond_cleanup16, label_for_body17, int1_exitcond, label_for_body17);

// Block for.cond42.preheader (label_for_cond42_preheader)
Argument* fwdref_185 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv189 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv189", label_for_cond42_preheader);
int64_indvars_iv189->addIncoming(int64_indvars_iv187, label_for_cond42_preheader_lr_ph);
int64_indvars_iv189->addIncoming(fwdref_185, label_for_cond_cleanup44);

BranchInst::Create(label_for_body45, label_for_cond_cleanup44, int1_cmp43155, label_for_cond42_preheader);

// Block for.cond.cleanup44 (label_for_cond_cleanup44)
Argument* fwdref_187 = new Argument(Type::getDoubleTy(mod->getContext()));
PHINode* double_sum40_0_lcssa = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum40.0.lcssa", label_for_cond_cleanup44);
double_sum40_0_lcssa->addIncoming(const_double_78, label_for_cond42_preheader);
double_sum40_0_lcssa->addIncoming(fwdref_187, label_for_body45);

BinaryOperator* int64_188 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv189, int64_170, "", label_for_cond_cleanup44);
GetElementPtrInst* ptr_arrayidx62 = GetElementPtrInst::Create(ptr_S, int64_188, "arrayidx62", label_for_cond_cleanup44);
LoadInst* double_189 = new LoadInst(ptr_arrayidx62, "", false, label_for_cond_cleanup44);
double_189->setAlignment(8);
BinaryOperator* double_sub63 = BinaryOperator::Create(Instruction::FSub, double_189, double_sum40_0_lcssa, "sub63", label_for_cond_cleanup44);
LoadInst* double_190 = new LoadInst(ptr_arrayidx67, "", false, label_for_cond_cleanup44);
double_190->setAlignment(8);
BinaryOperator* double_div = BinaryOperator::Create(Instruction::FDiv, double_sub63, double_190, "div", label_for_cond_cleanup44);
GetElementPtrInst* ptr_arrayidx71 = GetElementPtrInst::Create(ptr_D, int64_188, "arrayidx71", label_for_cond_cleanup44);
StoreInst* void_191 = new StoreInst(double_div, ptr_arrayidx71, false, label_for_cond_cleanup44);
void_191->setAlignment(8);
BinaryOperator* int64_indvars_iv_next190 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv189, const_int64_70, "indvars.iv.next190", label_for_cond_cleanup44);
CastInst* int32_lftr_wideiv193 = new TruncInst(int64_indvars_iv_next190, IntegerType::get(mod->getContext(), 32), "lftr.wideiv193", label_for_cond_cleanup44);
ICmpInst* int1_exitcond194 = new ICmpInst(*label_for_cond_cleanup44, ICmpInst::ICMP_EQ, int32_lftr_wideiv193, int32_d, "exitcond194");
BranchInst::Create(label_for_cond_loopexit, label_for_cond42_preheader, int1_exitcond194, label_for_cond_cleanup44);

// Block for.body45 (label_for_body45)
Argument* fwdref_193 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv178 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv178", label_for_body45);
int64_indvars_iv178->addIncoming(fwdref_193, label_for_body45);
int64_indvars_iv178->addIncoming(const_int64_68, label_for_cond42_preheader);

PHINode* double_sum40_0156 = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum40.0156", label_for_body45);
double_sum40_0156->addIncoming(fwdref_187, label_for_body45);
double_sum40_0156->addIncoming(const_double_78, label_for_cond42_preheader);

BinaryOperator* int64_194 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv178, int64_170, "", label_for_body45);
GetElementPtrInst* ptr_arrayidx49 = GetElementPtrInst::Create(ptr_D, int64_194, "arrayidx49", label_for_body45);
LoadInst* double_195 = new LoadInst(ptr_arrayidx49, "", false, label_for_body45);
double_195->setAlignment(8);
BinaryOperator* int64_196 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv178, int64_122, "", label_for_body45);
BinaryOperator* int64_197 = BinaryOperator::Create(Instruction::Add, int64_196, int64_indvars_iv189, "", label_for_body45);
GetElementPtrInst* ptr_arrayidx53 = GetElementPtrInst::Create(ptr_D, int64_197, "arrayidx53", label_for_body45);
LoadInst* double_198 = new LoadInst(ptr_arrayidx53, "", false, label_for_body45);
double_198->setAlignment(8);
BinaryOperator* double_mul54 = BinaryOperator::Create(Instruction::FMul, double_195, double_198, "mul54", label_for_body45);
BinaryOperator* double_add55 = BinaryOperator::Create(Instruction::FAdd, double_sum40_0156, double_mul54, "add55", label_for_body45);
BinaryOperator* int64_indvars_iv_next179 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv178, const_int64_70, "indvars.iv.next179", label_for_body45);
CastInst* int32_lftr_wideiv185 = new TruncInst(int64_indvars_iv_next179, IntegerType::get(mod->getContext(), 32), "lftr.wideiv185", label_for_body45);
ICmpInst* int1_exitcond186 = new ICmpInst(*label_for_body45, ICmpInst::ICMP_EQ, int32_lftr_wideiv185, int32_indvars_iv183, "exitcond186");
BranchInst::Create(label_for_cond_cleanup44, label_for_body45, int1_exitcond186, label_for_body45);

// Block ehcleanup78 (label_ehcleanup78)
PHINode* ptr_exn_slot_1 = PHINode::Create(PointerTy_1, 2, "exn.slot.1", label_ehcleanup78);
ptr_exn_slot_1->addIncoming(ptr_142, label_lpad1);
ptr_exn_slot_1->addIncoming(ptr_exn_slot_0, label_ehcleanup);

PHINode* int32_ehselector_slot_1 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "ehselector.slot.1", label_ehcleanup78);
int32_ehselector_slot_1->addIncoming(int32_143, label_lpad1);
int32_ehselector_slot_1->addIncoming(int32_ehselector_slot_0, label_ehcleanup);

std::vector<Value*> ptr_200_indices;
ptr_200_indices.push_back(const_int64_68);
ptr_200_indices.push_back(const_int32_69);
Instruction* ptr_200 = GetElementPtrInst::Create(ptr_ref_tmp_i, ptr_200_indices, "", label_ehcleanup78);
std::vector<Value*> void_201_params;
void_201_params.push_back(const_int64_70);
void_201_params.push_back(ptr_200);
CallInst* void_201 = CallInst::Create(func_llvm_lifetime_start, void_201_params, "", label_ehcleanup78);
void_201->setCallingConv(CallingConv::C);
void_201->setTailCall(false);
AttributeSet void_201_PAL;
void_201->setAttributes(void_201_PAL);

std::vector<Value*> ptr__M_p_i_i_i_indices;
ptr__M_p_i_i_i_indices.push_back(const_int64_68);
ptr__M_p_i_i_i_indices.push_back(const_int32_69);
ptr__M_p_i_i_i_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i = GetElementPtrInst::Create(ptr_funcName, ptr__M_p_i_i_i_indices, "_M_p.i.i.i", label_ehcleanup78);
LoadInst* ptr_202 = new LoadInst(ptr__M_p_i_i_i, "", false, label_ehcleanup78);
ptr_202->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i = GetElementPtrInst::Create(ptr_202, const_int64_75, "arrayidx.i.i", label_ehcleanup78);
CastInst* ptr_203 = new BitCastInst(ptr_arrayidx_i_i, PointerTy_40, "", label_ehcleanup78);
std::vector<Value*> void_204_params;
void_204_params.push_back(ptr_203);
void_204_params.push_back(ptr_ref_tmp_i);
CallInst* void_204 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_204_params, "", label_ehcleanup78);
void_204->setCallingConv(CallingConv::C);
void_204->setTailCall(false);
AttributeSet void_204_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_204_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_204->setAttributes(void_204_PAL);

std::vector<Value*> void_205_params;
void_205_params.push_back(const_int64_70);
void_205_params.push_back(ptr_200);
CallInst* void_205 = CallInst::Create(func_llvm_lifetime_end, void_205_params, "", label_ehcleanup78);
void_205->setCallingConv(CallingConv::C);
void_205->setTailCall(false);
AttributeSet void_205_PAL;
void_205->setAttributes(void_205_PAL);

BranchInst::Create(label_eh_resume, label_ehcleanup78);

// Block eh.resume (label_eh_resume)
PHINode* ptr_exn_slot_2 = PHINode::Create(PointerTy_1, 2, "exn.slot.2", label_eh_resume);
ptr_exn_slot_2->addIncoming(ptr_exn_slot_1, label_ehcleanup78);
ptr_exn_slot_2->addIncoming(ptr_138, label_lpad);

PHINode* int32_ehselector_slot_2 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "ehselector.slot.2", label_eh_resume);
int32_ehselector_slot_2->addIncoming(int32_ehselector_slot_1, label_ehcleanup78);
int32_ehselector_slot_2->addIncoming(int32_139, label_lpad);

std::vector<unsigned> struct_lpad_val_indices;
struct_lpad_val_indices.push_back(0);
InsertValueInst* struct_lpad_val = InsertValueInst::Create(const_struct_79, ptr_exn_slot_2, struct_lpad_val_indices, "lpad.val", label_eh_resume);
std::vector<unsigned> struct_lpad_val79_indices;
struct_lpad_val79_indices.push_back(1);
InsertValueInst* struct_lpad_val79 = InsertValueInst::Create(struct_lpad_val, int32_ehselector_slot_2, struct_lpad_val79_indices, "lpad.val79", label_eh_resume);
ResumeInst::Create(struct_lpad_val79, label_eh_resume);

// Resolve Forward References
fwdref_124->replaceAllUsesWith(int64_indvars_iv187); delete fwdref_124;
fwdref_187->replaceAllUsesWith(double_add55); delete fwdref_187;
fwdref_193->replaceAllUsesWith(int64_indvars_iv_next179); delete fwdref_193;
fwdref_125->replaceAllUsesWith(int64_indvars_iv_next196); delete fwdref_125;
fwdref_127->replaceAllUsesWith(int32_indvars_iv_next184); delete fwdref_127;
fwdref_166->replaceAllUsesWith(int64_indvars_iv_next173); delete fwdref_166;
fwdref_173->replaceAllUsesWith(double_add23); delete fwdref_173;
fwdref_178->replaceAllUsesWith(int64_indvars_iv_next); delete fwdref_178;
fwdref_185->replaceAllUsesWith(int64_indvars_iv_next190); delete fwdref_185;

}

// Function: main (func_main)
{
 Function::arg_iterator args = func_main->arg_begin();
 Value* int32_argc = args++;
 int32_argc->setName("argc");
 Value* ptr_args = args++;
 ptr_args->setName("args");
 
 BasicBlock* label_entry_208 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
 BasicBlock* label_invoke_cont_209 = BasicBlock::Create(mod->getContext(), "invoke.cont",func_main,0);
 BasicBlock* label_if_then_i_i = BasicBlock::Create(mod->getContext(), "if.then.i.i",func_main,0);
 BasicBlock* label__noexc = BasicBlock::Create(mod->getContext(), ".noexc",func_main,0);
 BasicBlock* label_if_else_i_i = BasicBlock::Create(mod->getContext(), "if.else.i.i",func_main,0);
 BasicBlock* label_if_then7_i_i = BasicBlock::Create(mod->getContext(), "if.then7.i.i",func_main,0);
 BasicBlock* label__noexc28 = BasicBlock::Create(mod->getContext(), ".noexc28",func_main,0);
 BasicBlock* label_invoke_cont3 = BasicBlock::Create(mod->getContext(), "invoke.cont3",func_main,0);
 BasicBlock* label_invoke_cont9 = BasicBlock::Create(mod->getContext(), "invoke.cont9",func_main,0);
 BasicBlock* label_delete_notnull = BasicBlock::Create(mod->getContext(), "delete.notnull",func_main,0);
 BasicBlock* label_lpad_210 = BasicBlock::Create(mod->getContext(), "lpad",func_main,0);
 BasicBlock* label_lpad2 = BasicBlock::Create(mod->getContext(), "lpad2",func_main,0);
 BasicBlock* label_lpad8 = BasicBlock::Create(mod->getContext(), "lpad8",func_main,0);
 BasicBlock* label_lpad11 = BasicBlock::Create(mod->getContext(), "lpad11",func_main,0);
 BasicBlock* label_eh_resume_211 = BasicBlock::Create(mod->getContext(), "eh.resume",func_main,0);
 
 // Block entry (label_entry_208)
 AllocaInst* ptr_ref_tmp_i35 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i35", label_entry_208);
 ptr_ref_tmp_i35->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i32 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i32", label_entry_208);
 ptr_ref_tmp_i32->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i29 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i29", label_entry_208);
 ptr_ref_tmp_i29->setAlignment(1);
 AllocaInst* ptr___endptr_i_i = new AllocaInst(PointerTy_1, "__endptr.i.i", label_entry_208);
 ptr___endptr_i_i->setAlignment(8);
 AllocaInst* ptr_ref_tmp_i_212 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i", label_entry_208);
 ptr_ref_tmp_i_212->setAlignment(1);
 AllocaInst* ptr_ref_tmp_213 = new AllocaInst(StructTy_class_std__basic_string, "ref.tmp", label_entry_208);
 ptr_ref_tmp_213->setAlignment(8);
 AllocaInst* ptr_ref_tmp1 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp1", label_entry_208);
 ptr_ref_tmp1->setAlignment(1);
 AllocaInst* ptr_inp = new AllocaInst(StructTy_class_std__basic_string, "inp", label_entry_208);
 ptr_inp->setAlignment(8);
 AllocaInst* ptr_ref_tmp7 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp7", label_entry_208);
 ptr_ref_tmp7->setAlignment(1);
 GetElementPtrInst* ptr_arrayidx_214 = GetElementPtrInst::Create(ptr_args, const_int64_70, "arrayidx", label_entry_208);
 LoadInst* ptr_215 = new LoadInst(ptr_arrayidx_214, "", false, label_entry_208);
 ptr_215->setAlignment(8);
 std::vector<Value*> void_216_params;
 void_216_params.push_back(ptr_ref_tmp_213);
 void_216_params.push_back(ptr_215);
 void_216_params.push_back(ptr_ref_tmp1);
 InvokeInst *void_216 = InvokeInst::Create(func__ZNSsC1EPKcRKSaIcE, label_invoke_cont_209, label_lpad_210, void_216_params, "", label_entry_208);
 void_216->setCallingConv(CallingConv::C);AttributeSet void_216_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_216_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_216->setAttributes(void_216_PAL);


// Block invoke.cont (label_invoke_cont_209)
std::vector<Value*> ptr__M_p_i_i_i27_indices;
ptr__M_p_i_i_i27_indices.push_back(const_int64_68);
ptr__M_p_i_i_i27_indices.push_back(const_int32_69);
ptr__M_p_i_i_i27_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i27 = GetElementPtrInst::Create(ptr_ref_tmp_213, ptr__M_p_i_i_i27_indices, "_M_p.i.i.i27", label_invoke_cont_209);
LoadInst* ptr_217 = new LoadInst(ptr__M_p_i_i_i27, "", false, label_invoke_cont_209);
ptr_217->setAlignment(8);
CastInst* ptr_218 = new BitCastInst(ptr___endptr_i_i, PointerTy_1, "", label_invoke_cont_209);
std::vector<Value*> void_219_params;
void_219_params.push_back(const_int64_72);
void_219_params.push_back(ptr_218);
CallInst* void_219 = CallInst::Create(func_llvm_lifetime_start, void_219_params, "", label_invoke_cont_209);
void_219->setCallingConv(CallingConv::C);
void_219->setTailCall(false);
AttributeSet void_219_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_219_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_219->setAttributes(void_219_PAL);

CallInst* ptr_call_i_i = CallInst::Create(func___errno_location, "call.i.i", label_invoke_cont_209);
ptr_call_i_i->setCallingConv(CallingConv::C);
ptr_call_i_i->setTailCall(true);
AttributeSet ptr_call_i_i_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_i_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call_i_i->setAttributes(ptr_call_i_i_PAL);

StoreInst* void_220 = new StoreInst(const_int32_69, ptr_call_i_i, false, label_invoke_cont_209);
void_220->setAlignment(4);
std::vector<Value*> int64_call1_i_i_params;
int64_call1_i_i_params.push_back(ptr_217);
int64_call1_i_i_params.push_back(ptr___endptr_i_i);
int64_call1_i_i_params.push_back(const_int32_80);
CallInst* int64_call1_i_i = CallInst::Create(func_strtol, int64_call1_i_i_params, "call1.i.i", label_invoke_cont_209);
int64_call1_i_i->setCallingConv(CallingConv::C);
int64_call1_i_i->setTailCall(false);
AttributeSet int64_call1_i_i_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int64_call1_i_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int64_call1_i_i->setAttributes(int64_call1_i_i_PAL);

LoadInst* ptr_221 = new LoadInst(ptr___endptr_i_i, "", false, label_invoke_cont_209);
ptr_221->setAlignment(8);
ICmpInst* int1_cmp_i_i = new ICmpInst(*label_invoke_cont_209, ICmpInst::ICMP_EQ, ptr_221, ptr_217, "cmp.i.i");
BranchInst::Create(label_if_then_i_i, label_if_else_i_i, int1_cmp_i_i, label_invoke_cont_209);

// Block if.then.i.i (label_if_then_i_i)
std::vector<Value*> void_223_params;
void_223_params.push_back(const_ptr_81);
InvokeInst *void_223 = InvokeInst::Create(func__ZSt24__throw_invalid_argumentPKc, label__noexc, label_lpad2, void_223_params, "", label_if_then_i_i);
void_223->setCallingConv(CallingConv::C);AttributeSet void_223_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_223_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_223->setAttributes(void_223_PAL);


// Block .noexc (label__noexc)
new UnreachableInst(mod->getContext(), label__noexc);

// Block if.else.i.i (label_if_else_i_i)
LoadInst* int32_225 = new LoadInst(ptr_call_i_i, "", false, label_if_else_i_i);
int32_225->setAlignment(4);
ICmpInst* int1_cmp3_i_i = new ICmpInst(*label_if_else_i_i, ICmpInst::ICMP_EQ, int32_225, const_int32_82, "cmp3.i.i");
BinaryOperator* int64_call1_off_i_i = BinaryOperator::Create(Instruction::Add, int64_call1_i_i, const_int64_83, "call1.off.i.i", label_if_else_i_i);
ICmpInst* int1_226 = new ICmpInst(*label_if_else_i_i, ICmpInst::ICMP_UGT, int64_call1_off_i_i, const_int64_84, "");
BinaryOperator* int1_227 = BinaryOperator::Create(Instruction::Or, int1_226, int1_cmp3_i_i, "", label_if_else_i_i);
BranchInst::Create(label_if_then7_i_i, label_invoke_cont3, int1_227, label_if_else_i_i);

// Block if.then7.i.i (label_if_then7_i_i)
std::vector<Value*> void_229_params;
void_229_params.push_back(const_ptr_81);
InvokeInst *void_229 = InvokeInst::Create(func__ZSt20__throw_out_of_rangePKc, label__noexc28, label_lpad2, void_229_params, "", label_if_then7_i_i);
void_229->setCallingConv(CallingConv::C);AttributeSet void_229_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_229_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_229->setAttributes(void_229_PAL);


// Block .noexc28 (label__noexc28)
new UnreachableInst(mod->getContext(), label__noexc28);

// Block invoke.cont3 (label_invoke_cont3)
std::vector<Value*> void_231_params;
void_231_params.push_back(const_int64_72);
void_231_params.push_back(ptr_218);
CallInst* void_231 = CallInst::Create(func_llvm_lifetime_end, void_231_params, "", label_invoke_cont3);
void_231->setCallingConv(CallingConv::C);
void_231->setTailCall(false);
AttributeSet void_231_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_231_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_231->setAttributes(void_231_PAL);

std::vector<Value*> ptr_232_indices;
ptr_232_indices.push_back(const_int64_68);
ptr_232_indices.push_back(const_int32_69);
Instruction* ptr_232 = GetElementPtrInst::Create(ptr_ref_tmp_i29, ptr_232_indices, "", label_invoke_cont3);
std::vector<Value*> void_233_params;
void_233_params.push_back(const_int64_70);
void_233_params.push_back(ptr_232);
CallInst* void_233 = CallInst::Create(func_llvm_lifetime_start, void_233_params, "", label_invoke_cont3);
void_233->setCallingConv(CallingConv::C);
void_233->setTailCall(false);
AttributeSet void_233_PAL;
void_233->setAttributes(void_233_PAL);

LoadInst* ptr_234 = new LoadInst(ptr__M_p_i_i_i27, "", false, label_invoke_cont3);
ptr_234->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i31 = GetElementPtrInst::Create(ptr_234, const_int64_75, "arrayidx.i.i31", label_invoke_cont3);
CastInst* ptr_235 = new BitCastInst(ptr_arrayidx_i_i31, PointerTy_40, "", label_invoke_cont3);
std::vector<Value*> void_236_params;
void_236_params.push_back(ptr_235);
void_236_params.push_back(ptr_ref_tmp_i29);
CallInst* void_236 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_236_params, "", label_invoke_cont3);
void_236->setCallingConv(CallingConv::C);
void_236->setTailCall(false);
AttributeSet void_236_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_236_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_236->setAttributes(void_236_PAL);

std::vector<Value*> void_237_params;
void_237_params.push_back(const_int64_70);
void_237_params.push_back(ptr_232);
CallInst* void_237 = CallInst::Create(func_llvm_lifetime_end, void_237_params, "", label_invoke_cont3);
void_237->setCallingConv(CallingConv::C);
void_237->setTailCall(false);
AttributeSet void_237_PAL;
void_237->setAttributes(void_237_PAL);

BinaryOperator* int64_mul = BinaryOperator::Create(Instruction::Shl, int64_call1_i_i, const_int64_85, "mul", label_invoke_cont3);
BinaryOperator* int64_238 = BinaryOperator::Create(Instruction::Mul, int64_mul, int64_call1_i_i, "", label_invoke_cont3);
BinaryOperator* int64_239 = BinaryOperator::Create(Instruction::And, int64_238, const_int64_86, "", label_invoke_cont3);
CallInst* ptr_call4 = CallInst::Create(func__Znam, int64_239, "call4", label_invoke_cont3);
ptr_call4->setCallingConv(CallingConv::C);
ptr_call4->setTailCall(false);
AttributeSet ptr_call4_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call4_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call4->setAttributes(ptr_call4_PAL);

CallInst* ptr_call6 = CallInst::Create(func__Znam, int64_239, "call6", label_invoke_cont3);
ptr_call6->setCallingConv(CallingConv::C);
ptr_call6->setTailCall(false);
AttributeSet ptr_call6_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call6_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call6->setAttributes(ptr_call6_PAL);

CastInst* ptr_240 = new BitCastInst(ptr_inp, PointerTy_1, "", label_invoke_cont3);
std::vector<Value*> void_241_params;
void_241_params.push_back(const_int64_72);
void_241_params.push_back(ptr_240);
CallInst* void_241 = CallInst::Create(func_llvm_lifetime_start, void_241_params, "", label_invoke_cont3);
void_241->setCallingConv(CallingConv::C);
void_241->setTailCall(false);
AttributeSet void_241_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_241_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_241->setAttributes(void_241_PAL);

std::vector<Value*> void_242_params;
void_242_params.push_back(ptr_inp);
void_242_params.push_back(const_ptr_87);
void_242_params.push_back(ptr_ref_tmp7);
InvokeInst *void_242 = InvokeInst::Create(func__ZNSsC1EPKcRKSaIcE, label_invoke_cont9, label_lpad8, void_242_params, "", label_invoke_cont3);
void_242->setCallingConv(CallingConv::C);AttributeSet void_242_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_242_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_242->setAttributes(void_242_PAL);


// Block invoke.cont9 (label_invoke_cont9)
CastInst* int32_conv_i_i = new TruncInst(int64_call1_i_i, IntegerType::get(mod->getContext(), 32), "conv.i.i", label_invoke_cont9);
CastInst* ptr_243 = new BitCastInst(ptr_call6, PointerTy_26, "", label_invoke_cont9);
CastInst* ptr_244 = new BitCastInst(ptr_call4, PointerTy_26, "", label_invoke_cont9);
std::vector<Value*> void_245_params;
void_245_params.push_back(int32_conv_i_i);
void_245_params.push_back(ptr_244);
void_245_params.push_back(ptr_243);
InvokeInst *void_245 = InvokeInst::Create(func__Z12testFunctioniPdS_, label_delete_notnull, label_lpad11, void_245_params, "", label_invoke_cont9);
void_245->setCallingConv(CallingConv::C);AttributeSet void_245_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_245_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_245->setAttributes(void_245_PAL);


// Block delete.notnull (label_delete_notnull)
CallInst* void_246 = CallInst::Create(func__ZdaPv, ptr_call4, "", label_delete_notnull);
void_246->setCallingConv(CallingConv::C);
void_246->setTailCall(false);
AttributeSet void_246_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_246_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_246->setAttributes(void_246_PAL);

CallInst* void_247 = CallInst::Create(func__ZdaPv, ptr_call6, "", label_delete_notnull);
void_247->setCallingConv(CallingConv::C);
void_247->setTailCall(false);
AttributeSet void_247_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_247_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_247->setAttributes(void_247_PAL);

std::vector<Value*> ptr_248_indices;
ptr_248_indices.push_back(const_int64_68);
ptr_248_indices.push_back(const_int32_69);
Instruction* ptr_248 = GetElementPtrInst::Create(ptr_ref_tmp_i32, ptr_248_indices, "", label_delete_notnull);
std::vector<Value*> void_249_params;
void_249_params.push_back(const_int64_70);
void_249_params.push_back(ptr_248);
CallInst* void_249 = CallInst::Create(func_llvm_lifetime_start, void_249_params, "", label_delete_notnull);
void_249->setCallingConv(CallingConv::C);
void_249->setTailCall(false);
AttributeSet void_249_PAL;
void_249->setAttributes(void_249_PAL);

std::vector<Value*> ptr__M_p_i_i_i33_indices;
ptr__M_p_i_i_i33_indices.push_back(const_int64_68);
ptr__M_p_i_i_i33_indices.push_back(const_int32_69);
ptr__M_p_i_i_i33_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i33 = GetElementPtrInst::Create(ptr_inp, ptr__M_p_i_i_i33_indices, "_M_p.i.i.i33", label_delete_notnull);
LoadInst* ptr_250 = new LoadInst(ptr__M_p_i_i_i33, "", false, label_delete_notnull);
ptr_250->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i34 = GetElementPtrInst::Create(ptr_250, const_int64_75, "arrayidx.i.i34", label_delete_notnull);
CastInst* ptr_251 = new BitCastInst(ptr_arrayidx_i_i34, PointerTy_40, "", label_delete_notnull);
std::vector<Value*> void_252_params;
void_252_params.push_back(ptr_251);
void_252_params.push_back(ptr_ref_tmp_i32);
CallInst* void_252 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_252_params, "", label_delete_notnull);
void_252->setCallingConv(CallingConv::C);
void_252->setTailCall(false);
AttributeSet void_252_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_252_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_252->setAttributes(void_252_PAL);

std::vector<Value*> void_253_params;
void_253_params.push_back(const_int64_70);
void_253_params.push_back(ptr_248);
CallInst* void_253 = CallInst::Create(func_llvm_lifetime_end, void_253_params, "", label_delete_notnull);
void_253->setCallingConv(CallingConv::C);
void_253->setTailCall(false);
AttributeSet void_253_PAL;
void_253->setAttributes(void_253_PAL);

std::vector<Value*> void_254_params;
void_254_params.push_back(const_int64_72);
void_254_params.push_back(ptr_240);
CallInst* void_254 = CallInst::Create(func_llvm_lifetime_end, void_254_params, "", label_delete_notnull);
void_254->setCallingConv(CallingConv::C);
void_254->setTailCall(false);
AttributeSet void_254_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_254_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_254->setAttributes(void_254_PAL);

ReturnInst::Create(mod->getContext(), const_int32_69, label_delete_notnull);

// Block lpad (label_lpad_210)
LandingPadInst* struct_256 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad_210);
struct_256->setCleanup(true);
std::vector<unsigned> ptr_257_indices;
ptr_257_indices.push_back(0);
ExtractValueInst* ptr_257 = ExtractValueInst::Create(struct_256, ptr_257_indices, "", label_lpad_210);
std::vector<unsigned> int32_258_indices;
int32_258_indices.push_back(1);
ExtractValueInst* int32_258 = ExtractValueInst::Create(struct_256, int32_258_indices, "", label_lpad_210);
BranchInst::Create(label_eh_resume_211, label_lpad_210);

// Block lpad2 (label_lpad2)
LandingPadInst* struct_260 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad2);
struct_260->setCleanup(true);
std::vector<unsigned> ptr_261_indices;
ptr_261_indices.push_back(0);
ExtractValueInst* ptr_261 = ExtractValueInst::Create(struct_260, ptr_261_indices, "", label_lpad2);
std::vector<unsigned> int32_262_indices;
int32_262_indices.push_back(1);
ExtractValueInst* int32_262 = ExtractValueInst::Create(struct_260, int32_262_indices, "", label_lpad2);
std::vector<Value*> ptr_263_indices;
ptr_263_indices.push_back(const_int64_68);
ptr_263_indices.push_back(const_int32_69);
Instruction* ptr_263 = GetElementPtrInst::Create(ptr_ref_tmp_i35, ptr_263_indices, "", label_lpad2);
std::vector<Value*> void_264_params;
void_264_params.push_back(const_int64_70);
void_264_params.push_back(ptr_263);
CallInst* void_264 = CallInst::Create(func_llvm_lifetime_start, void_264_params, "", label_lpad2);
void_264->setCallingConv(CallingConv::C);
void_264->setTailCall(false);
AttributeSet void_264_PAL;
void_264->setAttributes(void_264_PAL);

LoadInst* ptr_265 = new LoadInst(ptr__M_p_i_i_i27, "", false, label_lpad2);
ptr_265->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i37 = GetElementPtrInst::Create(ptr_265, const_int64_75, "arrayidx.i.i37", label_lpad2);
CastInst* ptr_266 = new BitCastInst(ptr_arrayidx_i_i37, PointerTy_40, "", label_lpad2);
std::vector<Value*> void_267_params;
void_267_params.push_back(ptr_266);
void_267_params.push_back(ptr_ref_tmp_i35);
CallInst* void_267 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_267_params, "", label_lpad2);
void_267->setCallingConv(CallingConv::C);
void_267->setTailCall(false);
AttributeSet void_267_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_267_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_267->setAttributes(void_267_PAL);

std::vector<Value*> void_268_params;
void_268_params.push_back(const_int64_70);
void_268_params.push_back(ptr_263);
CallInst* void_268 = CallInst::Create(func_llvm_lifetime_end, void_268_params, "", label_lpad2);
void_268->setCallingConv(CallingConv::C);
void_268->setTailCall(false);
AttributeSet void_268_PAL;
void_268->setAttributes(void_268_PAL);

BranchInst::Create(label_eh_resume_211, label_lpad2);

// Block lpad8 (label_lpad8)
LandingPadInst* struct_270 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad8);
struct_270->setCleanup(true);
std::vector<unsigned> ptr_271_indices;
ptr_271_indices.push_back(0);
ExtractValueInst* ptr_271 = ExtractValueInst::Create(struct_270, ptr_271_indices, "", label_lpad8);
std::vector<unsigned> int32_272_indices;
int32_272_indices.push_back(1);
ExtractValueInst* int32_272 = ExtractValueInst::Create(struct_270, int32_272_indices, "", label_lpad8);
BranchInst::Create(label_eh_resume_211, label_lpad8);

// Block lpad11 (label_lpad11)
LandingPadInst* struct_274 = LandingPadInst::Create(StructTy_45, const_ptr_77, 0, "", label_lpad11);
struct_274->setCleanup(true);
std::vector<unsigned> ptr_275_indices;
ptr_275_indices.push_back(0);
ExtractValueInst* ptr_275 = ExtractValueInst::Create(struct_274, ptr_275_indices, "", label_lpad11);
std::vector<unsigned> int32_276_indices;
int32_276_indices.push_back(1);
ExtractValueInst* int32_276 = ExtractValueInst::Create(struct_274, int32_276_indices, "", label_lpad11);
std::vector<Value*> ptr_277_indices;
ptr_277_indices.push_back(const_int64_68);
ptr_277_indices.push_back(const_int32_69);
Instruction* ptr_277 = GetElementPtrInst::Create(ptr_ref_tmp_i_212, ptr_277_indices, "", label_lpad11);
std::vector<Value*> void_278_params;
void_278_params.push_back(const_int64_70);
void_278_params.push_back(ptr_277);
CallInst* void_278 = CallInst::Create(func_llvm_lifetime_start, void_278_params, "", label_lpad11);
void_278->setCallingConv(CallingConv::C);
void_278->setTailCall(false);
AttributeSet void_278_PAL;
void_278->setAttributes(void_278_PAL);

std::vector<Value*> ptr__M_p_i_i_i_279_indices;
ptr__M_p_i_i_i_279_indices.push_back(const_int64_68);
ptr__M_p_i_i_i_279_indices.push_back(const_int32_69);
ptr__M_p_i_i_i_279_indices.push_back(const_int32_69);
Instruction* ptr__M_p_i_i_i_279 = GetElementPtrInst::Create(ptr_inp, ptr__M_p_i_i_i_279_indices, "_M_p.i.i.i", label_lpad11);
LoadInst* ptr_280 = new LoadInst(ptr__M_p_i_i_i_279, "", false, label_lpad11);
ptr_280->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i_281 = GetElementPtrInst::Create(ptr_280, const_int64_75, "arrayidx.i.i", label_lpad11);
CastInst* ptr_282 = new BitCastInst(ptr_arrayidx_i_i_281, PointerTy_40, "", label_lpad11);
std::vector<Value*> void_283_params;
void_283_params.push_back(ptr_282);
void_283_params.push_back(ptr_ref_tmp_i_212);
CallInst* void_283 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_283_params, "", label_lpad11);
void_283->setCallingConv(CallingConv::C);
void_283->setTailCall(false);
AttributeSet void_283_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_283_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_283->setAttributes(void_283_PAL);

std::vector<Value*> void_284_params;
void_284_params.push_back(const_int64_70);
void_284_params.push_back(ptr_277);
CallInst* void_284 = CallInst::Create(func_llvm_lifetime_end, void_284_params, "", label_lpad11);
void_284->setCallingConv(CallingConv::C);
void_284->setTailCall(false);
AttributeSet void_284_PAL;
void_284->setAttributes(void_284_PAL);

BranchInst::Create(label_eh_resume_211, label_lpad11);

// Block eh.resume (label_eh_resume_211)
PHINode* int32_ehselector_slot_1_286 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 4, "ehselector.slot.1", label_eh_resume_211);
int32_ehselector_slot_1_286->addIncoming(int32_276, label_lpad11);
int32_ehselector_slot_1_286->addIncoming(int32_272, label_lpad8);
int32_ehselector_slot_1_286->addIncoming(int32_262, label_lpad2);
int32_ehselector_slot_1_286->addIncoming(int32_258, label_lpad_210);

PHINode* ptr_exn_slot_1_287 = PHINode::Create(PointerTy_1, 4, "exn.slot.1", label_eh_resume_211);
ptr_exn_slot_1_287->addIncoming(ptr_275, label_lpad11);
ptr_exn_slot_1_287->addIncoming(ptr_271, label_lpad8);
ptr_exn_slot_1_287->addIncoming(ptr_261, label_lpad2);
ptr_exn_slot_1_287->addIncoming(ptr_257, label_lpad_210);

std::vector<unsigned> struct_lpad_val_288_indices;
struct_lpad_val_288_indices.push_back(0);
InsertValueInst* struct_lpad_val_288 = InsertValueInst::Create(const_struct_79, ptr_exn_slot_1_287, struct_lpad_val_288_indices, "lpad.val", label_eh_resume_211);
std::vector<unsigned> struct_lpad_val17_indices;
struct_lpad_val17_indices.push_back(1);
InsertValueInst* struct_lpad_val17 = InsertValueInst::Create(struct_lpad_val_288, int32_ehselector_slot_1_286, struct_lpad_val17_indices, "lpad.val17", label_eh_resume_211);
ResumeInst::Create(struct_lpad_val17, label_eh_resume_211);

}

// Function: _ZNSs4_Rep10_M_disposeERKSaIcE (func__ZNSs4_Rep10_M_disposeERKSaIcE)
{
 Function::arg_iterator args = func__ZNSs4_Rep10_M_disposeERKSaIcE->arg_begin();
 Value* ptr_this = args++;
 ptr_this->setName("this");
 Value* ptr___a = args++;
 ptr___a->setName("__a");
 
 BasicBlock* label_entry_290 = BasicBlock::Create(mod->getContext(), "entry",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then_i = BasicBlock::Create(mod->getContext(), "if.then.i",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_else_i = BasicBlock::Create(mod->getContext(), "if.else.i",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_invoke_cont_291 = BasicBlock::Create(mod->getContext(), "invoke.cont",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then4 = BasicBlock::Create(mod->getContext(), "if.then4",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_end5 = BasicBlock::Create(mod->getContext(), "if.end5",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 
 // Block entry (label_entry_290)
 ICmpInst* int1_cmp = new ICmpInst(*label_entry_290, ICmpInst::ICMP_EQ, ptr_this, const_ptr_88, "cmp");
 BranchInst::Create(label_if_end5, label_if_then, int1_cmp, label_entry_290);
 
 // Block if.then (label_if_then)
 std::vector<Value*> ptr__M_refcount_indices;
 ptr__M_refcount_indices.push_back(const_int64_68);
 ptr__M_refcount_indices.push_back(const_int32_69);
 ptr__M_refcount_indices.push_back(const_int32_89);
 Instruction* ptr__M_refcount = GetElementPtrInst::Create(ptr_this, ptr__M_refcount_indices, "_M_refcount", label_if_then);
 BranchInst::Create(label_if_then_i, label_if_else_i, const_int1_90, label_if_then);
 
 // Block if.then.i (label_if_then_i)
 AtomicRMWInst* int32_294 = new AtomicRMWInst(AtomicRMWInst::Add, ptr__M_refcount, const_int32_92, AcquireRelease, CrossThread, label_if_then_i);
 int32_294->setName("");
 int32_294->setVolatile(true);
 BranchInst::Create(label_invoke_cont_291, label_if_then_i);
 
 // Block if.else.i (label_if_else_i)
 LoadInst* int32_296 = new LoadInst(ptr__M_refcount, "", false, label_if_else_i);
 int32_296->setAlignment(4);
 BinaryOperator* int32_add_i_i = BinaryOperator::Create(Instruction::Add, int32_296, const_int32_92, "add.i.i", label_if_else_i);
 StoreInst* void_297 = new StoreInst(int32_add_i_i, ptr__M_refcount, false, label_if_else_i);
 void_297->setAlignment(4);
 BranchInst::Create(label_invoke_cont_291, label_if_else_i);
 
 // Block invoke.cont (label_invoke_cont_291)
 PHINode* int32_retval_0_i = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "retval.0.i", label_invoke_cont_291);
 int32_retval_0_i->addIncoming(int32_294, label_if_then_i);
 int32_retval_0_i->addIncoming(int32_296, label_if_else_i);
 
 ICmpInst* int1_cmp3 = new ICmpInst(*label_invoke_cont_291, ICmpInst::ICMP_SLT, int32_retval_0_i, const_int32_66, "cmp3");
 BranchInst::Create(label_if_then4, label_if_end5, int1_cmp3, label_invoke_cont_291);
 
 // Block if.then4 (label_if_then4)
 std::vector<Value*> void_300_params;
 void_300_params.push_back(ptr_this);
 void_300_params.push_back(ptr___a);
 CallInst* void_300 = CallInst::Create(func__ZNSs4_Rep10_M_destroyERKSaIcE, void_300_params, "", label_if_then4);
 void_300->setCallingConv(CallingConv::C);
 void_300->setTailCall(true);
 AttributeSet void_300_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 2U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_300_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_300->setAttributes(void_300_PAL);

BranchInst::Create(label_if_end5, label_if_then4);

// Block if.end5 (label_if_end5)
ReturnInst::Create(mod->getContext(), label_if_end5);

}

// Function: _GLOBAL__sub_I_main.cpp (func__GLOBAL__sub_I_main_cpp)
{
 
 BasicBlock* label_entry_303 = BasicBlock::Create(mod->getContext(), "entry",func__GLOBAL__sub_I_main_cpp,0);
 
 // Block entry (label_entry_303)
 CallInst* void_304 = CallInst::Create(func__ZNSt8ios_base4InitC1Ev, gvar_struct__ZStL8__ioinit, "", label_entry_303);
 void_304->setCallingConv(CallingConv::C);
 void_304->setTailCall(true);
 AttributeSet void_304_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_304_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_304->setAttributes(void_304_PAL);
 
 std::vector<Value*> int32_305_params;
 int32_305_params.push_back(const_ptr_93);
 int32_305_params.push_back(const_ptr_94);
 int32_305_params.push_back(gvar_int8___dso_handle);
 CallInst* int32_305 = CallInst::Create(func___cxa_atexit, int32_305_params, "", label_entry_303);
 int32_305->setCallingConv(CallingConv::C);
 int32_305->setTailCall(true);
 AttributeSet int32_305_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_305_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_305->setAttributes(int32_305_PAL);
 
 ReturnInst::Create(mod->getContext(), label_entry_303);
 
}

return mod;
}
