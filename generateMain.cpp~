// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("main.ll", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 StructType *StructTy_class_std__ios_base__Init = mod->getTypeByName("class.std::ios_base::Init");
 if (!StructTy_class_std__ios_base__Init) {
 StructTy_class_std__ios_base__Init = StructType::create(mod->getContext(), "class.std::ios_base::Init");
 }
 std::vector<Type*>StructTy_class_std__ios_base__Init_fields;
 StructTy_class_std__ios_base__Init_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_std__ios_base__Init->isOpaque()) {
 StructTy_class_std__ios_base__Init->setBody(StructTy_class_std__ios_base__Init_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_0 = PointerType::get(StructTy_class_std__ios_base__Init, 0);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 ArrayType* ArrayTy_2 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 8);
 
 PointerType* PointerTy_3 = PointerType::get(ArrayTy_2, 0);
 
 ArrayType* ArrayTy_4 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 5);
 
 PointerType* PointerTy_5 = PointerType::get(ArrayTy_4, 0);
 
 ArrayType* ArrayTy_7 = ArrayType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 PointerType* PointerTy_6 = PointerType::get(ArrayTy_7, 0);
 
 std::vector<Type*>StructTy_9_fields;
 StructTy_9_fields.push_back(IntegerType::get(mod->getContext(), 32));
 std::vector<Type*>FuncTy_11_args;
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_11, 0);
 
 StructTy_9_fields.push_back(PointerTy_10);
 StructTy_9_fields.push_back(PointerTy_1);
 StructType *StructTy_9 = StructType::get(mod->getContext(), StructTy_9_fields, /*isPacked=*/false);
 
 ArrayType* ArrayTy_8 = ArrayType::get(StructTy_9, 1);
 
 PointerType* PointerTy_12 = PointerType::get(ArrayTy_8, 0);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(PointerTy_0);
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_14_args;
 std::vector<Type*>FuncTy_16_args;
 FuncTy_16_args.push_back(PointerTy_1);
 FunctionType* FuncTy_16 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_16_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);
 
 FuncTy_14_args.push_back(PointerTy_15);
 FuncTy_14_args.push_back(PointerTy_1);
 FuncTy_14_args.push_back(PointerTy_1);
 FunctionType* FuncTy_14 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_14_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_struct_timespec = mod->getTypeByName("struct.timespec");
 if (!StructTy_struct_timespec) {
 StructTy_struct_timespec = StructType::create(mod->getContext(), "struct.timespec");
 }
 std::vector<Type*>StructTy_struct_timespec_fields;
 StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_timespec_fields.push_back(IntegerType::get(mod->getContext(), 64));
 if (StructTy_struct_timespec->isOpaque()) {
 StructTy_struct_timespec->setBody(StructTy_struct_timespec_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_17 = PointerType::get(StructTy_struct_timespec, 0);
 
 std::vector<Type*>FuncTy_19_args;
 FuncTy_19_args.push_back(IntegerType::get(mod->getContext(), 64));
 FuncTy_19_args.push_back(PointerTy_1);
 FunctionType* FuncTy_19 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_19_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_18 = PointerType::get(FuncTy_19, 0);
 
 PointerType* PointerTy_20 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 std::vector<Type*>FuncTy_22_args;
 FuncTy_22_args.push_back(PointerTy_17);
 FuncTy_22_args.push_back(PointerTy_17);
 FunctionType* FuncTy_22 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_22_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_21 = PointerType::get(FuncTy_22, 0);
 
 std::vector<Type*>FuncTy_23_args;
 FuncTy_23_args.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_24 = PointerType::get(Type::getDoubleTy(mod->getContext()), 0);
 
 FuncTy_23_args.push_back(PointerTy_24);
 FuncTy_23_args.push_back(PointerTy_24);
 StructType *StructTy_class_std__basic_string = mod->getTypeByName("class.std::basic_string");
 if (!StructTy_class_std__basic_string) {
 StructTy_class_std__basic_string = StructType::create(mod->getContext(), "class.std::basic_string");
 }
 std::vector<Type*>StructTy_class_std__basic_string_fields;
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields;
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields.push_back(PointerTy_1);
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields, /*isPacked=*/false);
 }
 
 StructTy_class_std__basic_string_fields.push_back(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider);
 if (StructTy_class_std__basic_string->isOpaque()) {
 StructTy_class_std__basic_string->setBody(StructTy_class_std__basic_string_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_25 = PointerType::get(StructTy_class_std__basic_string, 0);
 
 FuncTy_23_args.push_back(PointerTy_25);
 FunctionType* FuncTy_23 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_23_args,
  /*isVarArg=*/false);
 
 std::vector<Type*>FuncTy_27_args;
 FuncTy_27_args.push_back(PointerTy_25);
 FuncTy_27_args.push_back(PointerTy_25);
 FunctionType* FuncTy_27 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_27_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_26 = PointerType::get(FuncTy_27, 0);
 
 std::vector<Type*>FuncTy_28_args;
 FuncTy_28_args.push_back(IntegerType::get(mod->getContext(), 32));
 PointerType* PointerTy_29 = PointerType::get(PointerTy_1, 0);
 
 FuncTy_28_args.push_back(PointerTy_29);
 FunctionType* FuncTy_28 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_28_args,
  /*isVarArg=*/false);
 
 StructType *StructTy_class_std__allocator = mod->getTypeByName("class.std::allocator");
 if (!StructTy_class_std__allocator) {
 StructTy_class_std__allocator = StructType::create(mod->getContext(), "class.std::allocator");
 }
 std::vector<Type*>StructTy_class_std__allocator_fields;
 StructTy_class_std__allocator_fields.push_back(IntegerType::get(mod->getContext(), 8));
 if (StructTy_class_std__allocator->isOpaque()) {
 StructTy_class_std__allocator->setBody(StructTy_class_std__allocator_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_30 = PointerType::get(StructTy_class_std__allocator, 0);
 
 std::vector<Type*>FuncTy_32_args;
 FuncTy_32_args.push_back(PointerTy_25);
 FuncTy_32_args.push_back(PointerTy_1);
 FuncTy_32_args.push_back(PointerTy_30);
 FunctionType* FuncTy_32 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_32_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_31 = PointerType::get(FuncTy_32, 0);
 
 PointerType* PointerTy_33 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_35_args;
 FunctionType* FuncTy_35 = FunctionType::get(
  /*Result=*/PointerTy_33,
  /*Params=*/FuncTy_35_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_34 = PointerType::get(FuncTy_35, 0);
 
 std::vector<Type*>FuncTy_37_args;
 FuncTy_37_args.push_back(PointerTy_1);
 FuncTy_37_args.push_back(PointerTy_29);
 FuncTy_37_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_37 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 64),
  /*Params=*/FuncTy_37_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_36 = PointerType::get(FuncTy_37, 0);
 
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields;
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Rep_base");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields;
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 64));
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields.push_back(IntegerType::get(mod->getContext(), 32));
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields.push_back(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_base);
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_38 = PointerType::get(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Rep, 0);
 
 std::vector<Type*>FuncTy_40_args;
 FuncTy_40_args.push_back(PointerTy_38);
 FuncTy_40_args.push_back(PointerTy_30);
 FunctionType* FuncTy_40 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_40_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_39 = PointerType::get(FuncTy_40, 0);
 
 std::vector<Type*>FuncTy_42_args;
 FuncTy_42_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_42 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_42_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_41 = PointerType::get(FuncTy_42, 0);
 
 PointerType* PointerTy_43 = PointerType::get(FuncTy_23, 0);
 
 std::vector<Type*>StructTy_44_fields;
 StructTy_44_fields.push_back(PointerTy_1);
 StructTy_44_fields.push_back(IntegerType::get(mod->getContext(), 32));
 StructType *StructTy_44 = StructType::get(mod->getContext(), StructTy_44_fields, /*isPacked=*/false);
 
 std::vector<Type*>FuncTy_45_args;
 FunctionType* FuncTy_45 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_45_args,
  /*isVarArg=*/true);
 
 std::vector<Type*>FuncTy_46_args;
 FuncTy_46_args.push_back(PointerTy_33);
 FuncTy_46_args.push_back(PointerTy_15);
 FunctionType* FuncTy_46 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_46_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_47 = PointerType::get(FuncTy_13, 0);
 
 PointerType* PointerTy_48 = PointerType::get(FuncTy_14, 0);
 
 
 // Function Declarations
 
 Function* func__ZNSt8ios_base4InitC1Ev = mod->getFunction("_ZNSt8ios_base4InitC1Ev");
 if (!func__ZNSt8ios_base4InitC1Ev) {
 func__ZNSt8ios_base4InitC1Ev = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitC1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitC1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitC1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitC1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitC1Ev->setAttributes(func__ZNSt8ios_base4InitC1Ev_PAL);
 
 Function* func__ZNSt8ios_base4InitD1Ev = mod->getFunction("_ZNSt8ios_base4InitD1Ev");
 if (!func__ZNSt8ios_base4InitD1Ev) {
 func__ZNSt8ios_base4InitD1Ev = Function::Create(
  /*Type=*/FuncTy_13,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_ZNSt8ios_base4InitD1Ev", mod); // (external, no body)
 func__ZNSt8ios_base4InitD1Ev->setCallingConv(CallingConv::C);
 }
 AttributeSet func__ZNSt8ios_base4InitD1Ev_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__ZNSt8ios_base4InitD1Ev_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__ZNSt8ios_base4InitD1Ev->setAttributes(func__ZNSt8ios_base4InitD1Ev_PAL);
 
 Function* func___cxa_atexit = mod->getFunction("__cxa_atexit");
 if (!func___cxa_atexit) {
 func___cxa_atexit = Function::Create(
  /*Type=*/FuncTy_14,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"__cxa_atexit", mod); // (external, no body)
 func___cxa_atexit->setCallingConv(CallingConv::C);
 }
 AttributeSet func___cxa_atexit_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func___cxa_atexit_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func___cxa_atexit->setAttributes(func___cxa_atexit_PAL);
 
 Function* func__Z19doesNothingButSleepv = mod->getFunction("_Z19doesNothingButSleepv");
 if (!func__Z19doesNothingButSleepv) {
 func__Z19doesNothingButSleepv = Function::Create(
  /*Type=*/FuncTy_11,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z19doesNothingButSleepv", mod); 
 func__Z19doesNothingButSleepv->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z19doesNothingButSleepv_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z19doesNothingButSleepv_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z19doesNothingButSleepv->setAttributes(func__Z19doesNothingButSleepv_PAL);
 
 Function* func__Z12testFunctioniPdS_Ss = mod->getFunction("_Z12testFunctioniPdS_Ss");
 if (!func__Z12testFunctioniPdS_Ss) {
 func__Z12testFunctioniPdS_Ss = Function::Create(
  /*Type=*/FuncTy_23,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z12testFunctioniPdS_Ss", mod); 
 func__Z12testFunctioniPdS_Ss->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z12testFunctioniPdS_Ss_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ReadOnly);
    B.addAttribute(Attribute::NoCapture);
    PAS = AttributeSet::get(mod->getContext(), 2U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__Z12testFunctioniPdS_Ss_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__Z12testFunctioniPdS_Ss->setAttributes(func__Z12testFunctioniPdS_Ss_PAL);

Function* func__Z40_metric_capture_long_double_timer_setup_RSsS_ = mod->getFunction("_Z40_metric_capture_long_double_timer_setup_RSsS_");
if (!func__Z40_metric_capture_long_double_timer_setup_RSsS_) {
func__Z40_metric_capture_long_double_timer_setup_RSsS_ = Function::Create(
 /*Type=*/FuncTy_27,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Z40_metric_capture_long_double_timer_setup_RSsS_", mod); // (external, no body)
func__Z40_metric_capture_long_double_timer_setup_RSsS_->setCallingConv(CallingConv::C);
}
AttributeSet func__Z40_metric_capture_long_double_timer_setup_RSsS__PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::OptimizeForSize);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func__Z40_metric_capture_long_double_timer_setup_RSsS__PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__Z40_metric_capture_long_double_timer_setup_RSsS_->setAttributes(func__Z40_metric_capture_long_double_timer_setup_RSsS__PAL);

Function* func_llvm_lifetime_start = mod->getFunction("llvm.lifetime.start");
if (!func_llvm_lifetime_start) {
func_llvm_lifetime_start = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.start", mod); // (external, no body)
func_llvm_lifetime_start->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_start_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_start_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_start->setAttributes(func_llvm_lifetime_start_PAL);

Function* func_llvm_lifetime_end = mod->getFunction("llvm.lifetime.end");
if (!func_llvm_lifetime_end) {
func_llvm_lifetime_end = Function::Create(
 /*Type=*/FuncTy_19,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"llvm.lifetime.end", mod); // (external, no body)
func_llvm_lifetime_end->setCallingConv(CallingConv::C);
}
AttributeSet func_llvm_lifetime_end_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_llvm_lifetime_end_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_llvm_lifetime_end->setAttributes(func_llvm_lifetime_end_PAL);

Function* func_main = mod->getFunction("main");
if (!func_main) {
func_main = Function::Create(
 /*Type=*/FuncTy_28,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"main", mod); 
func_main->setCallingConv(CallingConv::C);
}
AttributeSet func_main_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   B.addAttribute(Attribute::NoCapture);
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_main->setAttributes(func_main_PAL);

Function* func__ZNSsC1EPKcRKSaIcE = mod->getFunction("_ZNSsC1EPKcRKSaIcE");
if (!func__ZNSsC1EPKcRKSaIcE) {
func__ZNSsC1EPKcRKSaIcE = Function::Create(
 /*Type=*/FuncTy_32,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSsC1EPKcRKSaIcE", mod); // (external, no body)
func__ZNSsC1EPKcRKSaIcE->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSsC1EPKcRKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSsC1EPKcRKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSsC1EPKcRKSaIcE->setAttributes(func__ZNSsC1EPKcRKSaIcE_PAL);

Function* func___gxx_personality_v0 = mod->getFunction("__gxx_personality_v0");
if (!func___gxx_personality_v0) {
func___gxx_personality_v0 = Function::Create(
 /*Type=*/FuncTy_45,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"__gxx_personality_v0", mod); // (external, no body)
func___gxx_personality_v0->setCallingConv(CallingConv::C);
}
AttributeSet func___gxx_personality_v0_PAL;
func___gxx_personality_v0->setAttributes(func___gxx_personality_v0_PAL);

Function* func__Znam = mod->getFunction("_Znam");
if (!func__Znam) {
func__Znam = Function::Create(
 /*Type=*/FuncTy_42,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_Znam", mod); // (external, no body)
func__Znam->setCallingConv(CallingConv::C);
}
AttributeSet func__Znam_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__Znam_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__Znam->setAttributes(func__Znam_PAL);

Function* func__ZNSsC1ERKSs = mod->getFunction("_ZNSsC1ERKSs");
if (!func__ZNSsC1ERKSs) {
func__ZNSsC1ERKSs = Function::Create(
 /*Type=*/FuncTy_27,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSsC1ERKSs", mod); // (external, no body)
func__ZNSsC1ERKSs->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSsC1ERKSs_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSsC1ERKSs_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSsC1ERKSs->setAttributes(func__ZNSsC1ERKSs_PAL);

Function* func__ZdaPv = mod->getFunction("_ZdaPv");
if (!func__ZdaPv) {
func__ZdaPv = Function::Create(
 /*Type=*/FuncTy_16,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZdaPv", mod); // (external, no body)
func__ZdaPv->setCallingConv(CallingConv::C);
}
AttributeSet func__ZdaPv_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZdaPv_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZdaPv->setAttributes(func__ZdaPv_PAL);

Function* func_strtol = mod->getFunction("strtol");
if (!func_strtol) {
func_strtol = Function::Create(
 /*Type=*/FuncTy_37,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"strtol", mod); // (external, no body)
func_strtol->setCallingConv(CallingConv::C);
}
AttributeSet func_strtol_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::ReadOnly);
   PAS = AttributeSet::get(mod->getContext(), 1U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoCapture);
  PAS = AttributeSet::get(mod->getContext(), 2U, B);
 }

Attrs.push_back(PAS);
{
 AttrBuilder B;
 B.addAttribute(Attribute::NoUnwind);
 B.addAttribute(Attribute::OptimizeForSize);
 PAS = AttributeSet::get(mod->getContext(), ~0U, B);
}

Attrs.push_back(PAS);
func_strtol_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func_strtol->setAttributes(func_strtol_PAL);

Function* func___errno_location = mod->getFunction("__errno_location");
if (!func___errno_location) {
func___errno_location = Function::Create(
 /*Type=*/FuncTy_35,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"__errno_location", mod); // (external, no body)
func___errno_location->setCallingConv(CallingConv::C);
}
AttributeSet func___errno_location_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func___errno_location_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func___errno_location->setAttributes(func___errno_location_PAL);

Function* func__ZSt24__throw_invalid_argumentPKc = mod->getFunction("_ZSt24__throw_invalid_argumentPKc");
if (!func__ZSt24__throw_invalid_argumentPKc) {
func__ZSt24__throw_invalid_argumentPKc = Function::Create(
 /*Type=*/FuncTy_16,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZSt24__throw_invalid_argumentPKc", mod); // (external, no body)
func__ZSt24__throw_invalid_argumentPKc->setCallingConv(CallingConv::C);
}
AttributeSet func__ZSt24__throw_invalid_argumentPKc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZSt24__throw_invalid_argumentPKc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZSt24__throw_invalid_argumentPKc->setAttributes(func__ZSt24__throw_invalid_argumentPKc_PAL);

Function* func__ZSt20__throw_out_of_rangePKc = mod->getFunction("_ZSt20__throw_out_of_rangePKc");
if (!func__ZSt20__throw_out_of_rangePKc) {
func__ZSt20__throw_out_of_rangePKc = Function::Create(
 /*Type=*/FuncTy_16,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZSt20__throw_out_of_rangePKc", mod); // (external, no body)
func__ZSt20__throw_out_of_rangePKc->setCallingConv(CallingConv::C);
}
AttributeSet func__ZSt20__throw_out_of_rangePKc_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZSt20__throw_out_of_rangePKc_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZSt20__throw_out_of_rangePKc->setAttributes(func__ZSt20__throw_out_of_rangePKc_PAL);

Function* func__ZNSs4_Rep10_M_disposeERKSaIcE = mod->getFunction("_ZNSs4_Rep10_M_disposeERKSaIcE");
if (!func__ZNSs4_Rep10_M_disposeERKSaIcE) {
func__ZNSs4_Rep10_M_disposeERKSaIcE = Function::Create(
 /*Type=*/FuncTy_40,
 /*Linkage=*/GlobalValue::AvailableExternallyLinkage ,
 /*Name=*/"_ZNSs4_Rep10_M_disposeERKSaIcE", mod); 
func__ZNSs4_Rep10_M_disposeERKSaIcE->setCallingConv(CallingConv::C);
func__ZNSs4_Rep10_M_disposeERKSaIcE->setAlignment(2);
}
AttributeSet func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  B.addAttribute(Attribute::UWTable);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSs4_Rep10_M_disposeERKSaIcE->setAttributes(func__ZNSs4_Rep10_M_disposeERKSaIcE_PAL);

Function* func__ZNSs4_Rep10_M_destroyERKSaIcE = mod->getFunction("_ZNSs4_Rep10_M_destroyERKSaIcE");
if (!func__ZNSs4_Rep10_M_destroyERKSaIcE) {
func__ZNSs4_Rep10_M_destroyERKSaIcE = Function::Create(
 /*Type=*/FuncTy_40,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"_ZNSs4_Rep10_M_destroyERKSaIcE", mod); // (external, no body)
func__ZNSs4_Rep10_M_destroyERKSaIcE->setCallingConv(CallingConv::C);
}
AttributeSet func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
func__ZNSs4_Rep10_M_destroyERKSaIcE->setAttributes(func__ZNSs4_Rep10_M_destroyERKSaIcE_PAL);

Function* func___pthread_key_create = mod->getFunction("__pthread_key_create");
if (!func___pthread_key_create) {
func___pthread_key_create = Function::Create(
 /*Type=*/FuncTy_46,
 /*Linkage=*/GlobalValue::ExternalWeakLinkage,
 /*Name=*/"__pthread_key_create", mod); // (external, no body)
func___pthread_key_create->setCallingConv(CallingConv::C);
}
AttributeSet func___pthread_key_create_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func___pthread_key_create_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func___pthread_key_create->setAttributes(func___pthread_key_create_PAL);

Function* func_nanosleep = mod->getFunction("nanosleep");
if (!func_nanosleep) {
func_nanosleep = Function::Create(
 /*Type=*/FuncTy_22,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"nanosleep", mod); // (external, no body)
func_nanosleep->setCallingConv(CallingConv::C);
}
AttributeSet func_nanosleep_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_nanosleep_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_nanosleep->setAttributes(func_nanosleep_PAL);

Function* func__GLOBAL__sub_I_main_cpp = mod->getFunction("_GLOBAL__sub_I_main.cpp");
if (!func__GLOBAL__sub_I_main_cpp) {
func__GLOBAL__sub_I_main_cpp = Function::Create(
 /*Type=*/FuncTy_11,
 /*Linkage=*/GlobalValue::InternalLinkage,
 /*Name=*/"_GLOBAL__sub_I_main.cpp", mod); 
func__GLOBAL__sub_I_main_cpp->setCallingConv(CallingConv::C);
func__GLOBAL__sub_I_main_cpp->setSection(".text.startup");
}
AttributeSet func__GLOBAL__sub_I_main_cpp_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__GLOBAL__sub_I_main_cpp_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__GLOBAL__sub_I_main_cpp->setAttributes(func__GLOBAL__sub_I_main_cpp_PAL);

// Global Variable Declarations


GlobalVariable* gvar_struct__ZStL8__ioinit = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/StructTy_class_std__ios_base__Init,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::InternalLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"_ZStL8__ioinit");
gvar_struct__ZStL8__ioinit->setAlignment(1);

GlobalVariable* gvar_int8___dso_handle = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/IntegerType::get(mod->getContext(), 8),
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"__dso_handle");

GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_2,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str");
gvar_array__str->setAlignment(1);

GlobalVariable* gvar_array__str1 = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_4,
/*isConstant=*/true,
/*Linkage=*/GlobalValue::PrivateLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/".str1");
gvar_array__str1->setAlignment(1);

GlobalVariable* gvar_array__ZNSs4_Rep20_S_empty_rep_storageE = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_7,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::ExternalLinkage,
/*Initializer=*/0, 
/*Name=*/"_ZNSs4_Rep20_S_empty_rep_storageE");
gvar_array__ZNSs4_Rep20_S_empty_rep_storageE->setAlignment(8);

GlobalVariable* gvar_array_llvm_global_ctors = new GlobalVariable(/*Module=*/*mod, 
/*Type=*/ArrayTy_8,
/*isConstant=*/false,
/*Linkage=*/GlobalValue::AppendingLinkage,
/*Initializer=*/0, // has initializer, specified below
/*Name=*/"llvm.global_ctors");

// Constant Definitions
ConstantAggregateZero* const_struct_49 = ConstantAggregateZero::get(StructTy_class_std__ios_base__Init);
Constant *const_array_50 = ConstantDataArray::getString(mod->getContext(), "abcdefg", true);
Constant *const_array_51 = ConstantDataArray::getString(mod->getContext(), "stoi", true);
std::vector<Constant*> const_array_52_elems;
std::vector<Constant*> const_struct_53_fields;
ConstantInt* const_int32_54 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("65535"), 10));
const_struct_53_fields.push_back(const_int32_54);
const_struct_53_fields.push_back(func__GLOBAL__sub_I_main_cpp);
ConstantPointerNull* const_ptr_55 = ConstantPointerNull::get(PointerTy_1);
const_struct_53_fields.push_back(const_ptr_55);
Constant* const_struct_53 = ConstantStruct::get(StructTy_9, const_struct_53_fields);
const_array_52_elems.push_back(const_struct_53);
Constant* const_array_52 = ConstantArray::get(ArrayTy_8, const_array_52_elems);
ConstantInt* const_int32_56 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int64_57 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("16"), 10));
ConstantInt* const_int64_58 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int32_59 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int64_60 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
ConstantPointerNull* const_ptr_61 = ConstantPointerNull::get(PointerTy_17);
ConstantFP* const_double_62 = ConstantFP::get(mod->getContext(), APFloat(0.000000e+00));
ConstantInt* const_int64_63 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("8"), 10));
ConstantInt* const_int32_64 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
std::vector<Constant*> const_ptr_65_indices;
const_ptr_65_indices.push_back(const_int64_58);
const_ptr_65_indices.push_back(const_int64_58);
Constant* const_ptr_65 = ConstantExpr::getGetElementPtr(gvar_array__str1, const_ptr_65_indices);
ConstantInt* const_int32_66 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("34"), 10));
ConstantInt* const_int64_67 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("2147483648"), 10));
ConstantInt* const_int64_68 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("4294967295"), 10));
ConstantInt* const_int64_69 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("-24"), 10));
ConstantInt* const_int64_70 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("3"), 10));
ConstantInt* const_int64_71 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("34359738360"), 10));
std::vector<Constant*> const_ptr_72_indices;
const_ptr_72_indices.push_back(const_int64_58);
const_ptr_72_indices.push_back(const_int64_58);
Constant* const_ptr_72 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_72_indices);
Constant* const_ptr_73 = ConstantExpr::getCast(Instruction::BitCast, func___gxx_personality_v0, PointerTy_1);
UndefValue* const_struct_74 = UndefValue::get(StructTy_44);
Constant* const_ptr_75 = ConstantExpr::getCast(Instruction::BitCast, gvar_array__ZNSs4_Rep20_S_empty_rep_storageE, PointerTy_38);
ConstantInt* const_int32_76 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
Constant* const_ptr_78 = ConstantExpr::getCast(Instruction::BitCast, func___pthread_key_create, PointerTy_1);
Constant* const_int1_77 = ConstantExpr::getICmp(ICmpInst::ICMP_NEconst_ptr_78, const_ptr_55);
ConstantInt* const_int32_79 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("-1"), 10));
Constant* const_ptr_80 = ConstantExpr::getCast(Instruction::BitCast, func__ZNSt8ios_base4InitD1Ev, PointerTy_15);
std::vector<Constant*> const_ptr_81_indices;
const_ptr_81_indices.push_back(const_int64_58);
const_ptr_81_indices.push_back(const_int32_59);
Constant* const_ptr_81 = ConstantExpr::getGetElementPtr(gvar_struct__ZStL8__ioinit, const_ptr_81_indices);

// Global Variable Definitions
gvar_struct__ZStL8__ioinit->setInitializer(const_struct_49);
gvar_array__str->setInitializer(const_array_50);
gvar_array__str1->setInitializer(const_array_51);
gvar_array_llvm_global_ctors->setInitializer(const_array_52);

// Function Definitions

// Function: _Z19doesNothingButSleepv (func__Z19doesNothingButSleepv)
{
 
 BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func__Z19doesNothingButSleepv,0);
 
 // Block entry (label_entry)
 AllocaInst* ptr___ts_i = new AllocaInst(StructTy_struct_timespec, "__ts.i", label_entry);
 ptr___ts_i->setAlignment(8);
 CastInst* ptr_82 = new BitCastInst(ptr___ts_i, PointerTy_1, "", label_entry);
 std::vector<Value*> void_83_params;
 void_83_params.push_back(const_int64_57);
 void_83_params.push_back(ptr_82);
 CallInst* void_83 = CallInst::Create(func_llvm_lifetime_start, void_83_params, "", label_entry);
 void_83->setCallingConv(CallingConv::C);
 void_83->setTailCall(false);
 AttributeSet void_83_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_83_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_83->setAttributes(void_83_PAL);
 
 std::vector<Value*> ptr_tv_sec_i_indices;
 ptr_tv_sec_i_indices.push_back(const_int64_58);
 ptr_tv_sec_i_indices.push_back(const_int32_59);
 Instruction* ptr_tv_sec_i = GetElementPtrInst::Create(ptr___ts_i, ptr_tv_sec_i_indices, "tv_sec.i", label_entry);
 StoreInst* void_84 = new StoreInst(const_int64_60, ptr_tv_sec_i, false, label_entry);
 void_84->setAlignment(8);
 std::vector<Value*> ptr_tv_nsec_i_indices;
 ptr_tv_nsec_i_indices.push_back(const_int64_58);
 ptr_tv_nsec_i_indices.push_back(const_int32_56);
 Instruction* ptr_tv_nsec_i = GetElementPtrInst::Create(ptr___ts_i, ptr_tv_nsec_i_indices, "tv_nsec.i", label_entry);
 StoreInst* void_85 = new StoreInst(const_int64_58, ptr_tv_nsec_i, false, label_entry);
 void_85->setAlignment(8);
 std::vector<Value*> int32_call7_i_params;
 int32_call7_i_params.push_back(ptr___ts_i);
 int32_call7_i_params.push_back(const_ptr_61);
 CallInst* int32_call7_i = CallInst::Create(func_nanosleep, int32_call7_i_params, "call7.i", label_entry);
 int32_call7_i->setCallingConv(CallingConv::C);
 int32_call7_i->setTailCall(false);
 AttributeSet int32_call7_i_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_call7_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_call7_i->setAttributes(int32_call7_i_PAL);
 
 std::vector<Value*> void_86_params;
 void_86_params.push_back(const_int64_57);
 void_86_params.push_back(ptr_82);
 CallInst* void_86 = CallInst::Create(func_llvm_lifetime_end, void_86_params, "", label_entry);
 void_86->setCallingConv(CallingConv::C);
 void_86->setTailCall(false);
 AttributeSet void_86_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_86_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_86->setAttributes(void_86_PAL);
 
 ReturnInst::Create(mod->getContext(), label_entry);
 
}

// Function: _Z12testFunctioniPdS_Ss (func__Z12testFunctioniPdS_Ss)
{
 Function::arg_iterator args = func__Z12testFunctioniPdS_Ss->arg_begin();
 Value* int32_d = args++;
 int32_d->setName("d");
 Value* ptr_S = args++;
 ptr_S->setName("S");
 Value* ptr_D = args++;
 ptr_D->setName("D");
 Value* ptr_abc = args++;
 ptr_abc->setName("abc");
 
 BasicBlock* label_entry_88 = BasicBlock::Create(mod->getContext(), "entry",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond1_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond1.preheader.lr.ph",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond_loopexit = BasicBlock::Create(mod->getContext(), "for.cond.loopexit",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond5_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond5.preheader.lr.ph",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond_cleanup = BasicBlock::Create(mod->getContext(), "for.cond.cleanup",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond5_preheader = BasicBlock::Create(mod->getContext(), "for.cond5.preheader",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond_cleanup3 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup3",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond33_preheader_lr_ph = BasicBlock::Create(mod->getContext(), "for.cond33.preheader.lr.ph",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond_cleanup7 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup7",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_body8 = BasicBlock::Create(mod->getContext(), "for.body8",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond33_preheader = BasicBlock::Create(mod->getContext(), "for.cond33.preheader",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_cond_cleanup35 = BasicBlock::Create(mod->getContext(), "for.cond.cleanup35",func__Z12testFunctioniPdS_Ss,0);
 BasicBlock* label_for_body36 = BasicBlock::Create(mod->getContext(), "for.body36",func__Z12testFunctioniPdS_Ss,0);
 
 // Block entry (label_entry_88)
 std::vector<Value*> void_89_params;
 void_89_params.push_back(ptr_abc);
 void_89_params.push_back(ptr_abc);
 CallInst* void_89 = CallInst::Create(func__Z40_metric_capture_long_double_timer_setup_RSsS_, void_89_params, "", label_entry_88);
 void_89->setCallingConv(CallingConv::C);
 void_89->setTailCall(true);
 AttributeSet void_89_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 1U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_89_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_89->setAttributes(void_89_PAL);

ICmpInst* int1_cmp137 = new ICmpInst(*label_entry_88, ICmpInst::ICMP_SGT, int32_d, const_int32_59, "cmp137");
BranchInst::Create(label_for_cond1_preheader_lr_ph, label_for_cond_cleanup, int1_cmp137, label_entry_88);

// Block for.cond1.preheader.lr.ph (label_for_cond1_preheader_lr_ph)
CastInst* int64_91 = new SExtInst(int32_d, IntegerType::get(mod->getContext(), 64), "", label_for_cond1_preheader_lr_ph);
BranchInst::Create(label_for_cond5_preheader_lr_ph, label_for_cond1_preheader_lr_ph);

// Block for.cond.loopexit (label_for_cond_loopexit)
Argument* fwdref_93 = new Argument(IntegerType::get(mod->getContext(), 64));
BinaryOperator* int64_indvars_iv_next162 = BinaryOperator::Create(Instruction::Add, fwdref_93, const_int64_60, "indvars.iv.next162", label_for_cond_loopexit);
Argument* fwdref_94 = new Argument(IntegerType::get(mod->getContext(), 64));
CastInst* int32_lftr_wideiv172 = new TruncInst(fwdref_94, IntegerType::get(mod->getContext(), 32), "lftr.wideiv172", label_for_cond_loopexit);
ICmpInst* int1_exitcond173 = new ICmpInst(*label_for_cond_loopexit, ICmpInst::ICMP_EQ, int32_lftr_wideiv172, int32_d, "exitcond173");
BranchInst::Create(label_for_cond_cleanup, label_for_cond5_preheader_lr_ph, int1_exitcond173, label_for_cond_loopexit);

// Block for.cond5.preheader.lr.ph (label_for_cond5_preheader_lr_ph)
PHINode* int64_indvars_iv169 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv169", label_for_cond5_preheader_lr_ph);
int64_indvars_iv169->addIncoming(const_int64_58, label_for_cond1_preheader_lr_ph);
int64_indvars_iv169->addIncoming(fwdref_94, label_for_cond_loopexit);

PHINode* int64_indvars_iv161 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv161", label_for_cond5_preheader_lr_ph);
int64_indvars_iv161->addIncoming(const_int64_60, label_for_cond1_preheader_lr_ph);
int64_indvars_iv161->addIncoming(int64_indvars_iv_next162, label_for_cond_loopexit);

Argument* fwdref_96 = new Argument(IntegerType::get(mod->getContext(), 32));
PHINode* int32_indvars_iv157 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "indvars.iv157", label_for_cond5_preheader_lr_ph);
int32_indvars_iv157->addIncoming(const_int32_59, label_for_cond1_preheader_lr_ph);
int32_indvars_iv157->addIncoming(fwdref_96, label_for_cond_loopexit);

ICmpInst* int1_cmp6123 = new ICmpInst(*label_for_cond5_preheader_lr_ph, ICmpInst::ICMP_SGT, int64_indvars_iv169, const_int64_58, "cmp6123");
BranchInst::Create(label_for_cond5_preheader, label_for_cond5_preheader_lr_ph);

// Block for.cond.cleanup (label_for_cond_cleanup)
ReturnInst::Create(mod->getContext(), label_for_cond_cleanup);

// Block for.cond5.preheader (label_for_cond5_preheader)
Argument* fwdref_99 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv146 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv146", label_for_cond5_preheader);
int64_indvars_iv146->addIncoming(int64_indvars_iv169, label_for_cond5_preheader_lr_ph);
int64_indvars_iv146->addIncoming(fwdref_99, label_for_cond_cleanup7);

BinaryOperator* int64_100 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv146, int64_91, "", label_for_cond5_preheader);
BranchInst::Create(label_for_body8, label_for_cond_cleanup7, int1_cmp6123, label_for_cond5_preheader);

// Block for.cond.cleanup3 (label_for_cond_cleanup3)
BinaryOperator* int64_indvars_iv_next170 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv169, const_int64_60, "indvars.iv.next170", label_for_cond_cleanup3);
BinaryOperator* int32_indvars_iv_next158 = BinaryOperator::Create(Instruction::Add, int32_indvars_iv157, const_int32_56, "indvars.iv.next158", label_for_cond_cleanup3);
ICmpInst* int1_cmp28134 = new ICmpInst(*label_for_cond_cleanup3, ICmpInst::ICMP_SLT, int64_indvars_iv_next170, int64_91, "cmp28134");
BranchInst::Create(label_for_cond33_preheader_lr_ph, label_for_cond_loopexit, int1_cmp28134, label_for_cond_cleanup3);

// Block for.cond33.preheader.lr.ph (label_for_cond33_preheader_lr_ph)
ICmpInst* int1_cmp34129 = new ICmpInst(*label_for_cond33_preheader_lr_ph, ICmpInst::ICMP_SGT, int64_indvars_iv169, const_int64_58, "cmp34129");
BinaryOperator* int64_103 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv169, int64_91, "", label_for_cond33_preheader_lr_ph);
BinaryOperator* int32_mul37 = BinaryOperator::Create(Instruction::Mul, int32_indvars_iv157, int32_d, "mul37", label_for_cond33_preheader_lr_ph);
CastInst* int32_104 = new TruncInst(int64_indvars_iv169, IntegerType::get(mod->getContext(), 32), "", label_for_cond33_preheader_lr_ph);
BinaryOperator* int32_add56 = BinaryOperator::Create(Instruction::Add, int32_mul37, int32_104, "add56", label_for_cond33_preheader_lr_ph);
CastInst* int64_idxprom57 = new SExtInst(int32_add56, IntegerType::get(mod->getContext(), 64), "idxprom57", label_for_cond33_preheader_lr_ph);
GetElementPtrInst* ptr_arrayidx58 = GetElementPtrInst::Create(ptr_D, int64_idxprom57, "arrayidx58", label_for_cond33_preheader_lr_ph);
BranchInst::Create(label_for_cond33_preheader, label_for_cond33_preheader_lr_ph);

// Block for.cond.cleanup7 (label_for_cond_cleanup7)
Argument* fwdref_106 = new Argument(Type::getDoubleTy(mod->getContext()));
PHINode* double_sum_0_lcssa = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum.0.lcssa", label_for_cond_cleanup7);
double_sum_0_lcssa->addIncoming(const_double_62, label_for_cond5_preheader);
double_sum_0_lcssa->addIncoming(fwdref_106, label_for_body8);

BinaryOperator* int64_107 = BinaryOperator::Create(Instruction::Add, int64_100, int64_indvars_iv169, "", label_for_cond_cleanup7);
GetElementPtrInst* ptr_arrayidx18 = GetElementPtrInst::Create(ptr_S, int64_107, "arrayidx18", label_for_cond_cleanup7);
LoadInst* double_108 = new LoadInst(ptr_arrayidx18, "", false, label_for_cond_cleanup7);
double_108->setAlignment(8);
BinaryOperator* double_sub = BinaryOperator::Create(Instruction::FSub, double_108, double_sum_0_lcssa, "sub", label_for_cond_cleanup7);
GetElementPtrInst* ptr_arrayidx22 = GetElementPtrInst::Create(ptr_D, int64_107, "arrayidx22", label_for_cond_cleanup7);
StoreInst* void_109 = new StoreInst(double_sub, ptr_arrayidx22, false, label_for_cond_cleanup7);
void_109->setAlignment(8);
BinaryOperator* int64_indvars_iv_next147 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv146, const_int64_60, "indvars.iv.next147", label_for_cond_cleanup7);
CastInst* int32_lftr_wideiv150 = new TruncInst(int64_indvars_iv_next147, IntegerType::get(mod->getContext(), 32), "lftr.wideiv150", label_for_cond_cleanup7);
ICmpInst* int1_exitcond151 = new ICmpInst(*label_for_cond_cleanup7, ICmpInst::ICMP_EQ, int32_lftr_wideiv150, int32_d, "exitcond151");
BranchInst::Create(label_for_cond_cleanup3, label_for_cond5_preheader, int1_exitcond151, label_for_cond_cleanup7);

// Block for.body8 (label_for_body8)
Argument* fwdref_111 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv", label_for_body8);
int64_indvars_iv->addIncoming(fwdref_111, label_for_body8);
int64_indvars_iv->addIncoming(const_int64_58, label_for_cond5_preheader);

PHINode* double_sum_0124 = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum.0124", label_for_body8);
double_sum_0124->addIncoming(fwdref_106, label_for_body8);
double_sum_0124->addIncoming(const_double_62, label_for_cond5_preheader);

BinaryOperator* int64_112 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv, int64_100, "", label_for_body8);
GetElementPtrInst* ptr_arrayidx = GetElementPtrInst::Create(ptr_D, int64_112, "arrayidx", label_for_body8);
LoadInst* double_113 = new LoadInst(ptr_arrayidx, "", false, label_for_body8);
double_113->setAlignment(8);
BinaryOperator* int64_114 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv, int64_91, "", label_for_body8);
BinaryOperator* int64_115 = BinaryOperator::Create(Instruction::Add, int64_114, int64_indvars_iv169, "", label_for_body8);
GetElementPtrInst* ptr_arrayidx12 = GetElementPtrInst::Create(ptr_D, int64_115, "arrayidx12", label_for_body8);
LoadInst* double_116 = new LoadInst(ptr_arrayidx12, "", false, label_for_body8);
double_116->setAlignment(8);
BinaryOperator* double_mul13 = BinaryOperator::Create(Instruction::FMul, double_113, double_116, "mul13", label_for_body8);
BinaryOperator* double_add14 = BinaryOperator::Create(Instruction::FAdd, double_sum_0124, double_mul13, "add14", label_for_body8);
BinaryOperator* int64_indvars_iv_next = BinaryOperator::Create(Instruction::Add, int64_indvars_iv, const_int64_60, "indvars.iv.next", label_for_body8);
CastInst* int32_lftr_wideiv = new TruncInst(int64_indvars_iv_next, IntegerType::get(mod->getContext(), 32), "lftr.wideiv", label_for_body8);
ICmpInst* int1_exitcond = new ICmpInst(*label_for_body8, ICmpInst::ICMP_EQ, int32_lftr_wideiv, int32_indvars_iv157, "exitcond");
BranchInst::Create(label_for_cond_cleanup7, label_for_body8, int1_exitcond, label_for_body8);

// Block for.cond33.preheader (label_for_cond33_preheader)
Argument* fwdref_118 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv163 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv163", label_for_cond33_preheader);
int64_indvars_iv163->addIncoming(int64_indvars_iv161, label_for_cond33_preheader_lr_ph);
int64_indvars_iv163->addIncoming(fwdref_118, label_for_cond_cleanup35);

BranchInst::Create(label_for_body36, label_for_cond_cleanup35, int1_cmp34129, label_for_cond33_preheader);

// Block for.cond.cleanup35 (label_for_cond_cleanup35)
Argument* fwdref_120 = new Argument(Type::getDoubleTy(mod->getContext()));
PHINode* double_sum31_0_lcssa = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum31.0.lcssa", label_for_cond_cleanup35);
double_sum31_0_lcssa->addIncoming(const_double_62, label_for_cond33_preheader);
double_sum31_0_lcssa->addIncoming(fwdref_120, label_for_body36);

BinaryOperator* int64_121 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv163, int64_103, "", label_for_cond_cleanup35);
GetElementPtrInst* ptr_arrayidx53 = GetElementPtrInst::Create(ptr_S, int64_121, "arrayidx53", label_for_cond_cleanup35);
LoadInst* double_122 = new LoadInst(ptr_arrayidx53, "", false, label_for_cond_cleanup35);
double_122->setAlignment(8);
BinaryOperator* double_sub54 = BinaryOperator::Create(Instruction::FSub, double_122, double_sum31_0_lcssa, "sub54", label_for_cond_cleanup35);
LoadInst* double_123 = new LoadInst(ptr_arrayidx58, "", false, label_for_cond_cleanup35);
double_123->setAlignment(8);
BinaryOperator* double_div = BinaryOperator::Create(Instruction::FDiv, double_sub54, double_123, "div", label_for_cond_cleanup35);
GetElementPtrInst* ptr_arrayidx62 = GetElementPtrInst::Create(ptr_D, int64_121, "arrayidx62", label_for_cond_cleanup35);
StoreInst* void_124 = new StoreInst(double_div, ptr_arrayidx62, false, label_for_cond_cleanup35);
void_124->setAlignment(8);
BinaryOperator* int64_indvars_iv_next164 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv163, const_int64_60, "indvars.iv.next164", label_for_cond_cleanup35);
CastInst* int32_lftr_wideiv167 = new TruncInst(int64_indvars_iv_next164, IntegerType::get(mod->getContext(), 32), "lftr.wideiv167", label_for_cond_cleanup35);
ICmpInst* int1_exitcond168 = new ICmpInst(*label_for_cond_cleanup35, ICmpInst::ICMP_EQ, int32_lftr_wideiv167, int32_d, "exitcond168");
BranchInst::Create(label_for_cond_loopexit, label_for_cond33_preheader, int1_exitcond168, label_for_cond_cleanup35);

// Block for.body36 (label_for_body36)
Argument* fwdref_126 = new Argument(IntegerType::get(mod->getContext(), 64));
PHINode* int64_indvars_iv152 = PHINode::Create(IntegerType::get(mod->getContext(), 64), 2, "indvars.iv152", label_for_body36);
int64_indvars_iv152->addIncoming(fwdref_126, label_for_body36);
int64_indvars_iv152->addIncoming(const_int64_58, label_for_cond33_preheader);

PHINode* double_sum31_0130 = PHINode::Create(Type::getDoubleTy(mod->getContext()), 2, "sum31.0130", label_for_body36);
double_sum31_0130->addIncoming(fwdref_120, label_for_body36);
double_sum31_0130->addIncoming(const_double_62, label_for_cond33_preheader);

BinaryOperator* int64_127 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv152, int64_103, "", label_for_body36);
GetElementPtrInst* ptr_arrayidx40 = GetElementPtrInst::Create(ptr_D, int64_127, "arrayidx40", label_for_body36);
LoadInst* double_128 = new LoadInst(ptr_arrayidx40, "", false, label_for_body36);
double_128->setAlignment(8);
BinaryOperator* int64_129 = BinaryOperator::Create(Instruction::Mul, int64_indvars_iv152, int64_91, "", label_for_body36);
BinaryOperator* int64_130 = BinaryOperator::Create(Instruction::Add, int64_129, int64_indvars_iv163, "", label_for_body36);
GetElementPtrInst* ptr_arrayidx44 = GetElementPtrInst::Create(ptr_D, int64_130, "arrayidx44", label_for_body36);
LoadInst* double_131 = new LoadInst(ptr_arrayidx44, "", false, label_for_body36);
double_131->setAlignment(8);
BinaryOperator* double_mul45 = BinaryOperator::Create(Instruction::FMul, double_128, double_131, "mul45", label_for_body36);
BinaryOperator* double_add46 = BinaryOperator::Create(Instruction::FAdd, double_sum31_0130, double_mul45, "add46", label_for_body36);
BinaryOperator* int64_indvars_iv_next153 = BinaryOperator::Create(Instruction::Add, int64_indvars_iv152, const_int64_60, "indvars.iv.next153", label_for_body36);
CastInst* int32_lftr_wideiv159 = new TruncInst(int64_indvars_iv_next153, IntegerType::get(mod->getContext(), 32), "lftr.wideiv159", label_for_body36);
ICmpInst* int1_exitcond160 = new ICmpInst(*label_for_body36, ICmpInst::ICMP_EQ, int32_lftr_wideiv159, int32_indvars_iv157, "exitcond160");
BranchInst::Create(label_for_cond_cleanup35, label_for_body36, int1_exitcond160, label_for_body36);

// Resolve Forward References
fwdref_93->replaceAllUsesWith(int64_indvars_iv161); delete fwdref_93;
fwdref_94->replaceAllUsesWith(int64_indvars_iv_next170); delete fwdref_94;
fwdref_96->replaceAllUsesWith(int32_indvars_iv_next158); delete fwdref_96;
fwdref_99->replaceAllUsesWith(int64_indvars_iv_next147); delete fwdref_99;
fwdref_106->replaceAllUsesWith(double_add14); delete fwdref_106;
fwdref_111->replaceAllUsesWith(int64_indvars_iv_next); delete fwdref_111;
fwdref_118->replaceAllUsesWith(int64_indvars_iv_next164); delete fwdref_118;
fwdref_120->replaceAllUsesWith(double_add46); delete fwdref_120;
fwdref_126->replaceAllUsesWith(int64_indvars_iv_next153); delete fwdref_126;

}

// Function: main (func_main)
{
 Function::arg_iterator args = func_main->arg_begin();
 Value* int32_argc = args++;
 int32_argc->setName("argc");
 Value* ptr_args = args++;
 ptr_args->setName("args");
 
 BasicBlock* label_entry_133 = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
 BasicBlock* label_invoke_cont = BasicBlock::Create(mod->getContext(), "invoke.cont",func_main,0);
 BasicBlock* label_if_then_i_i = BasicBlock::Create(mod->getContext(), "if.then.i.i",func_main,0);
 BasicBlock* label__noexc = BasicBlock::Create(mod->getContext(), ".noexc",func_main,0);
 BasicBlock* label_if_else_i_i = BasicBlock::Create(mod->getContext(), "if.else.i.i",func_main,0);
 BasicBlock* label_if_then7_i_i = BasicBlock::Create(mod->getContext(), "if.then7.i.i",func_main,0);
 BasicBlock* label__noexc31 = BasicBlock::Create(mod->getContext(), ".noexc31",func_main,0);
 BasicBlock* label_invoke_cont3 = BasicBlock::Create(mod->getContext(), "invoke.cont3",func_main,0);
 BasicBlock* label_invoke_cont9 = BasicBlock::Create(mod->getContext(), "invoke.cont9",func_main,0);
 BasicBlock* label_invoke_cont12 = BasicBlock::Create(mod->getContext(), "invoke.cont12",func_main,0);
 BasicBlock* label_invoke_cont14 = BasicBlock::Create(mod->getContext(), "invoke.cont14",func_main,0);
 BasicBlock* label_lpad = BasicBlock::Create(mod->getContext(), "lpad",func_main,0);
 BasicBlock* label_lpad2 = BasicBlock::Create(mod->getContext(), "lpad2",func_main,0);
 BasicBlock* label_lpad8 = BasicBlock::Create(mod->getContext(), "lpad8",func_main,0);
 BasicBlock* label_lpad11 = BasicBlock::Create(mod->getContext(), "lpad11",func_main,0);
 BasicBlock* label_lpad13 = BasicBlock::Create(mod->getContext(), "lpad13",func_main,0);
 BasicBlock* label_ehcleanup19 = BasicBlock::Create(mod->getContext(), "ehcleanup19",func_main,0);
 BasicBlock* label_eh_resume = BasicBlock::Create(mod->getContext(), "eh.resume",func_main,0);
 
 // Block entry (label_entry_133)
 AllocaInst* ptr_ref_tmp_i44 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i44", label_entry_133);
 ptr_ref_tmp_i44->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i41 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i41", label_entry_133);
 ptr_ref_tmp_i41->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i38 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i38", label_entry_133);
 ptr_ref_tmp_i38->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i35 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i35", label_entry_133);
 ptr_ref_tmp_i35->setAlignment(1);
 AllocaInst* ptr_ref_tmp_i32 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i32", label_entry_133);
 ptr_ref_tmp_i32->setAlignment(1);
 AllocaInst* ptr___endptr_i_i = new AllocaInst(PointerTy_1, "__endptr.i.i", label_entry_133);
 ptr___endptr_i_i->setAlignment(8);
 AllocaInst* ptr_ref_tmp_i = new AllocaInst(StructTy_class_std__allocator, "ref.tmp.i", label_entry_133);
 ptr_ref_tmp_i->setAlignment(1);
 AllocaInst* ptr_ref_tmp = new AllocaInst(StructTy_class_std__basic_string, "ref.tmp", label_entry_133);
 ptr_ref_tmp->setAlignment(8);
 AllocaInst* ptr_ref_tmp1 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp1", label_entry_133);
 ptr_ref_tmp1->setAlignment(1);
 AllocaInst* ptr_inp = new AllocaInst(StructTy_class_std__basic_string, "inp", label_entry_133);
 ptr_inp->setAlignment(8);
 AllocaInst* ptr_ref_tmp7 = new AllocaInst(StructTy_class_std__allocator, "ref.tmp7", label_entry_133);
 ptr_ref_tmp7->setAlignment(1);
 AllocaInst* ptr_agg_tmp = new AllocaInst(StructTy_class_std__basic_string, "agg.tmp", label_entry_133);
 ptr_agg_tmp->setAlignment(8);
 GetElementPtrInst* ptr_arrayidx_134 = GetElementPtrInst::Create(ptr_args, const_int64_60, "arrayidx", label_entry_133);
 LoadInst* ptr_135 = new LoadInst(ptr_arrayidx_134, "", false, label_entry_133);
 ptr_135->setAlignment(8);
 std::vector<Value*> void_136_params;
 void_136_params.push_back(ptr_ref_tmp);
 void_136_params.push_back(ptr_135);
 void_136_params.push_back(ptr_ref_tmp1);
 InvokeInst *void_136 = InvokeInst::Create(func__ZNSsC1EPKcRKSaIcE, label_invoke_cont, label_lpad, void_136_params, "", label_entry_133);
 void_136->setCallingConv(CallingConv::C);AttributeSet void_136_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 3U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_136_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_136->setAttributes(void_136_PAL);


// Block invoke.cont (label_invoke_cont)
std::vector<Value*> ptr__M_p_i_i_i30_indices;
ptr__M_p_i_i_i30_indices.push_back(const_int64_58);
ptr__M_p_i_i_i30_indices.push_back(const_int32_59);
ptr__M_p_i_i_i30_indices.push_back(const_int32_59);
Instruction* ptr__M_p_i_i_i30 = GetElementPtrInst::Create(ptr_ref_tmp, ptr__M_p_i_i_i30_indices, "_M_p.i.i.i30", label_invoke_cont);
LoadInst* ptr_137 = new LoadInst(ptr__M_p_i_i_i30, "", false, label_invoke_cont);
ptr_137->setAlignment(8);
CastInst* ptr_138 = new BitCastInst(ptr___endptr_i_i, PointerTy_1, "", label_invoke_cont);
std::vector<Value*> void_139_params;
void_139_params.push_back(const_int64_63);
void_139_params.push_back(ptr_138);
CallInst* void_139 = CallInst::Create(func_llvm_lifetime_start, void_139_params, "", label_invoke_cont);
void_139->setCallingConv(CallingConv::C);
void_139->setTailCall(false);
AttributeSet void_139_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_139_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_139->setAttributes(void_139_PAL);

CallInst* ptr_call_i_i = CallInst::Create(func___errno_location, "call.i.i", label_invoke_cont);
ptr_call_i_i->setCallingConv(CallingConv::C);
ptr_call_i_i->setTailCall(true);
AttributeSet ptr_call_i_i_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::ReadNone);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 ptr_call_i_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
ptr_call_i_i->setAttributes(ptr_call_i_i_PAL);

StoreInst* void_140 = new StoreInst(const_int32_59, ptr_call_i_i, false, label_invoke_cont);
void_140->setAlignment(4);
std::vector<Value*> int64_call1_i_i_params;
int64_call1_i_i_params.push_back(ptr_137);
int64_call1_i_i_params.push_back(ptr___endptr_i_i);
int64_call1_i_i_params.push_back(const_int32_64);
CallInst* int64_call1_i_i = CallInst::Create(func_strtol, int64_call1_i_i_params, "call1.i.i", label_invoke_cont);
int64_call1_i_i->setCallingConv(CallingConv::C);
int64_call1_i_i->setTailCall(false);
AttributeSet int64_call1_i_i_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 int64_call1_i_i_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
int64_call1_i_i->setAttributes(int64_call1_i_i_PAL);

LoadInst* ptr_141 = new LoadInst(ptr___endptr_i_i, "", false, label_invoke_cont);
ptr_141->setAlignment(8);
ICmpInst* int1_cmp_i_i = new ICmpInst(*label_invoke_cont, ICmpInst::ICMP_EQ, ptr_141, ptr_137, "cmp.i.i");
BranchInst::Create(label_if_then_i_i, label_if_else_i_i, int1_cmp_i_i, label_invoke_cont);

// Block if.then.i.i (label_if_then_i_i)
std::vector<Value*> void_143_params;
void_143_params.push_back(const_ptr_65);
InvokeInst *void_143 = InvokeInst::Create(func__ZSt24__throw_invalid_argumentPKc, label__noexc, label_lpad2, void_143_params, "", label_if_then_i_i);
void_143->setCallingConv(CallingConv::C);AttributeSet void_143_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_143_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_143->setAttributes(void_143_PAL);


// Block .noexc (label__noexc)
new UnreachableInst(mod->getContext(), label__noexc);

// Block if.else.i.i (label_if_else_i_i)
LoadInst* int32_145 = new LoadInst(ptr_call_i_i, "", false, label_if_else_i_i);
int32_145->setAlignment(4);
ICmpInst* int1_cmp3_i_i = new ICmpInst(*label_if_else_i_i, ICmpInst::ICMP_EQ, int32_145, const_int32_66, "cmp3.i.i");
BinaryOperator* int64_call1_off_i_i = BinaryOperator::Create(Instruction::Add, int64_call1_i_i, const_int64_67, "call1.off.i.i", label_if_else_i_i);
ICmpInst* int1_146 = new ICmpInst(*label_if_else_i_i, ICmpInst::ICMP_UGT, int64_call1_off_i_i, const_int64_68, "");
BinaryOperator* int1_147 = BinaryOperator::Create(Instruction::Or, int1_146, int1_cmp3_i_i, "", label_if_else_i_i);
BranchInst::Create(label_if_then7_i_i, label_invoke_cont3, int1_147, label_if_else_i_i);

// Block if.then7.i.i (label_if_then7_i_i)
std::vector<Value*> void_149_params;
void_149_params.push_back(const_ptr_65);
InvokeInst *void_149 = InvokeInst::Create(func__ZSt20__throw_out_of_rangePKc, label__noexc31, label_lpad2, void_149_params, "", label_if_then7_i_i);
void_149->setCallingConv(CallingConv::C);AttributeSet void_149_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoReturn);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_149_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_149->setAttributes(void_149_PAL);


// Block .noexc31 (label__noexc31)
new UnreachableInst(mod->getContext(), label__noexc31);

// Block invoke.cont3 (label_invoke_cont3)
CastInst* int32_conv_i_i = new TruncInst(int64_call1_i_i, IntegerType::get(mod->getContext(), 32), "conv.i.i", label_invoke_cont3);
std::vector<Value*> void_151_params;
void_151_params.push_back(const_int64_63);
void_151_params.push_back(ptr_138);
CallInst* void_151 = CallInst::Create(func_llvm_lifetime_end, void_151_params, "", label_invoke_cont3);
void_151->setCallingConv(CallingConv::C);
void_151->setTailCall(false);
AttributeSet void_151_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_151_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_151->setAttributes(void_151_PAL);

std::vector<Value*> ptr_152_indices;
ptr_152_indices.push_back(const_int64_58);
ptr_152_indices.push_back(const_int32_59);
Instruction* ptr_152 = GetElementPtrInst::Create(ptr_ref_tmp_i32, ptr_152_indices, "", label_invoke_cont3);
std::vector<Value*> void_153_params;
void_153_params.push_back(const_int64_60);
void_153_params.push_back(ptr_152);
CallInst* void_153 = CallInst::Create(func_llvm_lifetime_start, void_153_params, "", label_invoke_cont3);
void_153->setCallingConv(CallingConv::C);
void_153->setTailCall(false);
AttributeSet void_153_PAL;
void_153->setAttributes(void_153_PAL);

LoadInst* ptr_154 = new LoadInst(ptr__M_p_i_i_i30, "", false, label_invoke_cont3);
ptr_154->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i34 = GetElementPtrInst::Create(ptr_154, const_int64_69, "arrayidx.i.i34", label_invoke_cont3);
CastInst* ptr_155 = new BitCastInst(ptr_arrayidx_i_i34, PointerTy_38, "", label_invoke_cont3);
std::vector<Value*> void_156_params;
void_156_params.push_back(ptr_155);
void_156_params.push_back(ptr_ref_tmp_i32);
CallInst* void_156 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_156_params, "", label_invoke_cont3);
void_156->setCallingConv(CallingConv::C);
void_156->setTailCall(false);
AttributeSet void_156_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_156_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_156->setAttributes(void_156_PAL);

std::vector<Value*> void_157_params;
void_157_params.push_back(const_int64_60);
void_157_params.push_back(ptr_152);
CallInst* void_157 = CallInst::Create(func_llvm_lifetime_end, void_157_params, "", label_invoke_cont3);
void_157->setCallingConv(CallingConv::C);
void_157->setTailCall(false);
AttributeSet void_157_PAL;
void_157->setAttributes(void_157_PAL);

BinaryOperator* int64_mul = BinaryOperator::Create(Instruction::Shl, int64_call1_i_i, const_int64_70, "mul", label_invoke_cont3);
BinaryOperator* int64_158 = BinaryOperator::Create(Instruction::Mul, int64_mul, int64_call1_i_i, "", label_invoke_cont3);
BinaryOperator* int64_159 = BinaryOperator::Create(Instruction::And, int64_158, const_int64_71, "", label_invoke_cont3);
CallInst* ptr_call4 = CallInst::Create(func__Znam, int64_159, "call4", label_invoke_cont3);
ptr_call4->setCallingConv(CallingConv::C);
ptr_call4->setTailCall(false);
AttributeSet ptr_call4_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call4_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call4->setAttributes(ptr_call4_PAL);

CastInst* ptr_160 = new BitCastInst(ptr_call4, PointerTy_24, "", label_invoke_cont3);
CallInst* ptr_call6 = CallInst::Create(func__Znam, int64_159, "call6", label_invoke_cont3);
ptr_call6->setCallingConv(CallingConv::C);
ptr_call6->setTailCall(false);
AttributeSet ptr_call6_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoAlias);
   PAS = AttributeSet::get(mod->getContext(), 0U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
ptr_call6_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
ptr_call6->setAttributes(ptr_call6_PAL);

CastInst* ptr_161 = new BitCastInst(ptr_call6, PointerTy_24, "", label_invoke_cont3);
CastInst* ptr_162 = new BitCastInst(ptr_inp, PointerTy_1, "", label_invoke_cont3);
std::vector<Value*> void_163_params;
void_163_params.push_back(const_int64_63);
void_163_params.push_back(ptr_162);
CallInst* void_163 = CallInst::Create(func_llvm_lifetime_start, void_163_params, "", label_invoke_cont3);
void_163->setCallingConv(CallingConv::C);
void_163->setTailCall(false);
AttributeSet void_163_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_163_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_163->setAttributes(void_163_PAL);

std::vector<Value*> void_164_params;
void_164_params.push_back(ptr_inp);
void_164_params.push_back(const_ptr_72);
void_164_params.push_back(ptr_ref_tmp7);
InvokeInst *void_164 = InvokeInst::Create(func__ZNSsC1EPKcRKSaIcE, label_invoke_cont9, label_lpad8, void_164_params, "", label_invoke_cont3);
void_164->setCallingConv(CallingConv::C);AttributeSet void_164_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 3U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_164_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_164->setAttributes(void_164_PAL);


// Block invoke.cont9 (label_invoke_cont9)
std::vector<Value*> void_165_params;
void_165_params.push_back(ptr_agg_tmp);
void_165_params.push_back(ptr_inp);
InvokeInst *void_165 = InvokeInst::Create(func__ZNSsC1ERKSs, label_invoke_cont12, label_lpad11, void_165_params, "", label_invoke_cont9);
void_165->setCallingConv(CallingConv::C);AttributeSet void_165_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_165_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_165->setAttributes(void_165_PAL);


// Block invoke.cont12 (label_invoke_cont12)
std::vector<Value*> void_166_params;
void_166_params.push_back(int32_conv_i_i);
void_166_params.push_back(ptr_160);
void_166_params.push_back(ptr_161);
void_166_params.push_back(ptr_agg_tmp);
InvokeInst *void_166 = InvokeInst::Create(func__Z12testFunctioniPdS_Ss, label_invoke_cont14, label_lpad13, void_166_params, "", label_invoke_cont12);
void_166->setCallingConv(CallingConv::C);AttributeSet void_166_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_166_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_166->setAttributes(void_166_PAL);


// Block invoke.cont14 (label_invoke_cont14)
std::vector<Value*> ptr_167_indices;
ptr_167_indices.push_back(const_int64_58);
ptr_167_indices.push_back(const_int32_59);
Instruction* ptr_167 = GetElementPtrInst::Create(ptr_ref_tmp_i35, ptr_167_indices, "", label_invoke_cont14);
std::vector<Value*> void_168_params;
void_168_params.push_back(const_int64_60);
void_168_params.push_back(ptr_167);
CallInst* void_168 = CallInst::Create(func_llvm_lifetime_start, void_168_params, "", label_invoke_cont14);
void_168->setCallingConv(CallingConv::C);
void_168->setTailCall(false);
AttributeSet void_168_PAL;
void_168->setAttributes(void_168_PAL);

std::vector<Value*> ptr__M_p_i_i_i36_indices;
ptr__M_p_i_i_i36_indices.push_back(const_int64_58);
ptr__M_p_i_i_i36_indices.push_back(const_int32_59);
ptr__M_p_i_i_i36_indices.push_back(const_int32_59);
Instruction* ptr__M_p_i_i_i36 = GetElementPtrInst::Create(ptr_agg_tmp, ptr__M_p_i_i_i36_indices, "_M_p.i.i.i36", label_invoke_cont14);
LoadInst* ptr_169 = new LoadInst(ptr__M_p_i_i_i36, "", false, label_invoke_cont14);
ptr_169->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i37 = GetElementPtrInst::Create(ptr_169, const_int64_69, "arrayidx.i.i37", label_invoke_cont14);
CastInst* ptr_170 = new BitCastInst(ptr_arrayidx_i_i37, PointerTy_38, "", label_invoke_cont14);
std::vector<Value*> void_171_params;
void_171_params.push_back(ptr_170);
void_171_params.push_back(ptr_ref_tmp_i35);
CallInst* void_171 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_171_params, "", label_invoke_cont14);
void_171->setCallingConv(CallingConv::C);
void_171->setTailCall(false);
AttributeSet void_171_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_171_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_171->setAttributes(void_171_PAL);

std::vector<Value*> void_172_params;
void_172_params.push_back(const_int64_60);
void_172_params.push_back(ptr_167);
CallInst* void_172 = CallInst::Create(func_llvm_lifetime_end, void_172_params, "", label_invoke_cont14);
void_172->setCallingConv(CallingConv::C);
void_172->setTailCall(false);
AttributeSet void_172_PAL;
void_172->setAttributes(void_172_PAL);

CallInst* void_173 = CallInst::Create(func__ZdaPv, ptr_call4, "", label_invoke_cont14);
void_173->setCallingConv(CallingConv::C);
void_173->setTailCall(false);
AttributeSet void_173_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_173_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_173->setAttributes(void_173_PAL);

CallInst* void_174 = CallInst::Create(func__ZdaPv, ptr_call6, "", label_invoke_cont14);
void_174->setCallingConv(CallingConv::C);
void_174->setTailCall(false);
AttributeSet void_174_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_174_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_174->setAttributes(void_174_PAL);

std::vector<Value*> ptr_175_indices;
ptr_175_indices.push_back(const_int64_58);
ptr_175_indices.push_back(const_int32_59);
Instruction* ptr_175 = GetElementPtrInst::Create(ptr_ref_tmp_i38, ptr_175_indices, "", label_invoke_cont14);
std::vector<Value*> void_176_params;
void_176_params.push_back(const_int64_60);
void_176_params.push_back(ptr_175);
CallInst* void_176 = CallInst::Create(func_llvm_lifetime_start, void_176_params, "", label_invoke_cont14);
void_176->setCallingConv(CallingConv::C);
void_176->setTailCall(false);
AttributeSet void_176_PAL;
void_176->setAttributes(void_176_PAL);

std::vector<Value*> ptr__M_p_i_i_i39_indices;
ptr__M_p_i_i_i39_indices.push_back(const_int64_58);
ptr__M_p_i_i_i39_indices.push_back(const_int32_59);
ptr__M_p_i_i_i39_indices.push_back(const_int32_59);
Instruction* ptr__M_p_i_i_i39 = GetElementPtrInst::Create(ptr_inp, ptr__M_p_i_i_i39_indices, "_M_p.i.i.i39", label_invoke_cont14);
LoadInst* ptr_177 = new LoadInst(ptr__M_p_i_i_i39, "", false, label_invoke_cont14);
ptr_177->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i40 = GetElementPtrInst::Create(ptr_177, const_int64_69, "arrayidx.i.i40", label_invoke_cont14);
CastInst* ptr_178 = new BitCastInst(ptr_arrayidx_i_i40, PointerTy_38, "", label_invoke_cont14);
std::vector<Value*> void_179_params;
void_179_params.push_back(ptr_178);
void_179_params.push_back(ptr_ref_tmp_i38);
CallInst* void_179 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_179_params, "", label_invoke_cont14);
void_179->setCallingConv(CallingConv::C);
void_179->setTailCall(false);
AttributeSet void_179_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_179_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_179->setAttributes(void_179_PAL);

std::vector<Value*> void_180_params;
void_180_params.push_back(const_int64_60);
void_180_params.push_back(ptr_175);
CallInst* void_180 = CallInst::Create(func_llvm_lifetime_end, void_180_params, "", label_invoke_cont14);
void_180->setCallingConv(CallingConv::C);
void_180->setTailCall(false);
AttributeSet void_180_PAL;
void_180->setAttributes(void_180_PAL);

std::vector<Value*> void_181_params;
void_181_params.push_back(const_int64_63);
void_181_params.push_back(ptr_162);
CallInst* void_181 = CallInst::Create(func_llvm_lifetime_end, void_181_params, "", label_invoke_cont14);
void_181->setCallingConv(CallingConv::C);
void_181->setTailCall(false);
AttributeSet void_181_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_181_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_181->setAttributes(void_181_PAL);

ReturnInst::Create(mod->getContext(), const_int32_59, label_invoke_cont14);

// Block lpad (label_lpad)
LandingPadInst* struct_183 = LandingPadInst::Create(StructTy_44, const_ptr_73, 0, "", label_lpad);
struct_183->setCleanup(true);
std::vector<unsigned> ptr_184_indices;
ptr_184_indices.push_back(0);
ExtractValueInst* ptr_184 = ExtractValueInst::Create(struct_183, ptr_184_indices, "", label_lpad);
std::vector<unsigned> int32_185_indices;
int32_185_indices.push_back(1);
ExtractValueInst* int32_185 = ExtractValueInst::Create(struct_183, int32_185_indices, "", label_lpad);
BranchInst::Create(label_eh_resume, label_lpad);

// Block lpad2 (label_lpad2)
LandingPadInst* struct_187 = LandingPadInst::Create(StructTy_44, const_ptr_73, 0, "", label_lpad2);
struct_187->setCleanup(true);
std::vector<unsigned> ptr_188_indices;
ptr_188_indices.push_back(0);
ExtractValueInst* ptr_188 = ExtractValueInst::Create(struct_187, ptr_188_indices, "", label_lpad2);
std::vector<unsigned> int32_189_indices;
int32_189_indices.push_back(1);
ExtractValueInst* int32_189 = ExtractValueInst::Create(struct_187, int32_189_indices, "", label_lpad2);
std::vector<Value*> ptr_190_indices;
ptr_190_indices.push_back(const_int64_58);
ptr_190_indices.push_back(const_int32_59);
Instruction* ptr_190 = GetElementPtrInst::Create(ptr_ref_tmp_i41, ptr_190_indices, "", label_lpad2);
std::vector<Value*> void_191_params;
void_191_params.push_back(const_int64_60);
void_191_params.push_back(ptr_190);
CallInst* void_191 = CallInst::Create(func_llvm_lifetime_start, void_191_params, "", label_lpad2);
void_191->setCallingConv(CallingConv::C);
void_191->setTailCall(false);
AttributeSet void_191_PAL;
void_191->setAttributes(void_191_PAL);

LoadInst* ptr_192 = new LoadInst(ptr__M_p_i_i_i30, "", false, label_lpad2);
ptr_192->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i43 = GetElementPtrInst::Create(ptr_192, const_int64_69, "arrayidx.i.i43", label_lpad2);
CastInst* ptr_193 = new BitCastInst(ptr_arrayidx_i_i43, PointerTy_38, "", label_lpad2);
std::vector<Value*> void_194_params;
void_194_params.push_back(ptr_193);
void_194_params.push_back(ptr_ref_tmp_i41);
CallInst* void_194 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_194_params, "", label_lpad2);
void_194->setCallingConv(CallingConv::C);
void_194->setTailCall(false);
AttributeSet void_194_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_194_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_194->setAttributes(void_194_PAL);

std::vector<Value*> void_195_params;
void_195_params.push_back(const_int64_60);
void_195_params.push_back(ptr_190);
CallInst* void_195 = CallInst::Create(func_llvm_lifetime_end, void_195_params, "", label_lpad2);
void_195->setCallingConv(CallingConv::C);
void_195->setTailCall(false);
AttributeSet void_195_PAL;
void_195->setAttributes(void_195_PAL);

BranchInst::Create(label_eh_resume, label_lpad2);

// Block lpad8 (label_lpad8)
LandingPadInst* struct_197 = LandingPadInst::Create(StructTy_44, const_ptr_73, 0, "", label_lpad8);
struct_197->setCleanup(true);
std::vector<unsigned> ptr_198_indices;
ptr_198_indices.push_back(0);
ExtractValueInst* ptr_198 = ExtractValueInst::Create(struct_197, ptr_198_indices, "", label_lpad8);
std::vector<unsigned> int32_199_indices;
int32_199_indices.push_back(1);
ExtractValueInst* int32_199 = ExtractValueInst::Create(struct_197, int32_199_indices, "", label_lpad8);
BranchInst::Create(label_eh_resume, label_lpad8);

// Block lpad11 (label_lpad11)
LandingPadInst* struct_201 = LandingPadInst::Create(StructTy_44, const_ptr_73, 0, "", label_lpad11);
struct_201->setCleanup(true);
std::vector<unsigned> ptr_202_indices;
ptr_202_indices.push_back(0);
ExtractValueInst* ptr_202 = ExtractValueInst::Create(struct_201, ptr_202_indices, "", label_lpad11);
std::vector<unsigned> int32_203_indices;
int32_203_indices.push_back(1);
ExtractValueInst* int32_203 = ExtractValueInst::Create(struct_201, int32_203_indices, "", label_lpad11);
BranchInst::Create(label_ehcleanup19, label_lpad11);

// Block lpad13 (label_lpad13)
LandingPadInst* struct_205 = LandingPadInst::Create(StructTy_44, const_ptr_73, 0, "", label_lpad13);
struct_205->setCleanup(true);
std::vector<unsigned> ptr_206_indices;
ptr_206_indices.push_back(0);
ExtractValueInst* ptr_206 = ExtractValueInst::Create(struct_205, ptr_206_indices, "", label_lpad13);
std::vector<unsigned> int32_207_indices;
int32_207_indices.push_back(1);
ExtractValueInst* int32_207 = ExtractValueInst::Create(struct_205, int32_207_indices, "", label_lpad13);
std::vector<Value*> ptr_208_indices;
ptr_208_indices.push_back(const_int64_58);
ptr_208_indices.push_back(const_int32_59);
Instruction* ptr_208 = GetElementPtrInst::Create(ptr_ref_tmp_i44, ptr_208_indices, "", label_lpad13);
std::vector<Value*> void_209_params;
void_209_params.push_back(const_int64_60);
void_209_params.push_back(ptr_208);
CallInst* void_209 = CallInst::Create(func_llvm_lifetime_start, void_209_params, "", label_lpad13);
void_209->setCallingConv(CallingConv::C);
void_209->setTailCall(false);
AttributeSet void_209_PAL;
void_209->setAttributes(void_209_PAL);

std::vector<Value*> ptr__M_p_i_i_i45_indices;
ptr__M_p_i_i_i45_indices.push_back(const_int64_58);
ptr__M_p_i_i_i45_indices.push_back(const_int32_59);
ptr__M_p_i_i_i45_indices.push_back(const_int32_59);
Instruction* ptr__M_p_i_i_i45 = GetElementPtrInst::Create(ptr_agg_tmp, ptr__M_p_i_i_i45_indices, "_M_p.i.i.i45", label_lpad13);
LoadInst* ptr_210 = new LoadInst(ptr__M_p_i_i_i45, "", false, label_lpad13);
ptr_210->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i46 = GetElementPtrInst::Create(ptr_210, const_int64_69, "arrayidx.i.i46", label_lpad13);
CastInst* ptr_211 = new BitCastInst(ptr_arrayidx_i_i46, PointerTy_38, "", label_lpad13);
std::vector<Value*> void_212_params;
void_212_params.push_back(ptr_211);
void_212_params.push_back(ptr_ref_tmp_i44);
CallInst* void_212 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_212_params, "", label_lpad13);
void_212->setCallingConv(CallingConv::C);
void_212->setTailCall(false);
AttributeSet void_212_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_212_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_212->setAttributes(void_212_PAL);

std::vector<Value*> void_213_params;
void_213_params.push_back(const_int64_60);
void_213_params.push_back(ptr_208);
CallInst* void_213 = CallInst::Create(func_llvm_lifetime_end, void_213_params, "", label_lpad13);
void_213->setCallingConv(CallingConv::C);
void_213->setTailCall(false);
AttributeSet void_213_PAL;
void_213->setAttributes(void_213_PAL);

BranchInst::Create(label_ehcleanup19, label_lpad13);

// Block ehcleanup19 (label_ehcleanup19)
PHINode* int32_ehselector_slot_1 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "ehselector.slot.1", label_ehcleanup19);
int32_ehselector_slot_1->addIncoming(int32_207, label_lpad13);
int32_ehselector_slot_1->addIncoming(int32_203, label_lpad11);

PHINode* ptr_exn_slot_1 = PHINode::Create(PointerTy_1, 2, "exn.slot.1", label_ehcleanup19);
ptr_exn_slot_1->addIncoming(ptr_206, label_lpad13);
ptr_exn_slot_1->addIncoming(ptr_202, label_lpad11);

std::vector<Value*> ptr_215_indices;
ptr_215_indices.push_back(const_int64_58);
ptr_215_indices.push_back(const_int32_59);
Instruction* ptr_215 = GetElementPtrInst::Create(ptr_ref_tmp_i, ptr_215_indices, "", label_ehcleanup19);
std::vector<Value*> void_216_params;
void_216_params.push_back(const_int64_60);
void_216_params.push_back(ptr_215);
CallInst* void_216 = CallInst::Create(func_llvm_lifetime_start, void_216_params, "", label_ehcleanup19);
void_216->setCallingConv(CallingConv::C);
void_216->setTailCall(false);
AttributeSet void_216_PAL;
void_216->setAttributes(void_216_PAL);

std::vector<Value*> ptr__M_p_i_i_i_indices;
ptr__M_p_i_i_i_indices.push_back(const_int64_58);
ptr__M_p_i_i_i_indices.push_back(const_int32_59);
ptr__M_p_i_i_i_indices.push_back(const_int32_59);
Instruction* ptr__M_p_i_i_i = GetElementPtrInst::Create(ptr_inp, ptr__M_p_i_i_i_indices, "_M_p.i.i.i", label_ehcleanup19);
LoadInst* ptr_217 = new LoadInst(ptr__M_p_i_i_i, "", false, label_ehcleanup19);
ptr_217->setAlignment(8);
GetElementPtrInst* ptr_arrayidx_i_i = GetElementPtrInst::Create(ptr_217, const_int64_69, "arrayidx.i.i", label_ehcleanup19);
CastInst* ptr_218 = new BitCastInst(ptr_arrayidx_i_i, PointerTy_38, "", label_ehcleanup19);
std::vector<Value*> void_219_params;
void_219_params.push_back(ptr_218);
void_219_params.push_back(ptr_ref_tmp_i);
CallInst* void_219 = CallInst::Create(func__ZNSs4_Rep10_M_disposeERKSaIcE, void_219_params, "", label_ehcleanup19);
void_219->setCallingConv(CallingConv::C);
void_219->setTailCall(false);
AttributeSet void_219_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), 2U, B);
  }
 
 Attrs.push_back(PAS);
 {
  AttrBuilder B;
  B.addAttribute(Attribute::NoUnwind);
  B.addAttribute(Attribute::OptimizeForSize);
  PAS = AttributeSet::get(mod->getContext(), ~0U, B);
 }

Attrs.push_back(PAS);
void_219_PAL = AttributeSet::get(mod->getContext(), Attrs);

}
void_219->setAttributes(void_219_PAL);

std::vector<Value*> void_220_params;
void_220_params.push_back(const_int64_60);
void_220_params.push_back(ptr_215);
CallInst* void_220 = CallInst::Create(func_llvm_lifetime_end, void_220_params, "", label_ehcleanup19);
void_220->setCallingConv(CallingConv::C);
void_220->setTailCall(false);
AttributeSet void_220_PAL;
void_220->setAttributes(void_220_PAL);

BranchInst::Create(label_eh_resume, label_ehcleanup19);

// Block eh.resume (label_eh_resume)
PHINode* int32_ehselector_slot_2 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 4, "ehselector.slot.2", label_eh_resume);
int32_ehselector_slot_2->addIncoming(int32_ehselector_slot_1, label_ehcleanup19);
int32_ehselector_slot_2->addIncoming(int32_199, label_lpad8);
int32_ehselector_slot_2->addIncoming(int32_189, label_lpad2);
int32_ehselector_slot_2->addIncoming(int32_185, label_lpad);

PHINode* ptr_exn_slot_2 = PHINode::Create(PointerTy_1, 4, "exn.slot.2", label_eh_resume);
ptr_exn_slot_2->addIncoming(ptr_exn_slot_1, label_ehcleanup19);
ptr_exn_slot_2->addIncoming(ptr_198, label_lpad8);
ptr_exn_slot_2->addIncoming(ptr_188, label_lpad2);
ptr_exn_slot_2->addIncoming(ptr_184, label_lpad);

std::vector<unsigned> struct_lpad_val_indices;
struct_lpad_val_indices.push_back(0);
InsertValueInst* struct_lpad_val = InsertValueInst::Create(const_struct_74, ptr_exn_slot_2, struct_lpad_val_indices, "lpad.val", label_eh_resume);
std::vector<unsigned> struct_lpad_val20_indices;
struct_lpad_val20_indices.push_back(1);
InsertValueInst* struct_lpad_val20 = InsertValueInst::Create(struct_lpad_val, int32_ehselector_slot_2, struct_lpad_val20_indices, "lpad.val20", label_eh_resume);
ResumeInst::Create(struct_lpad_val20, label_eh_resume);

}

// Function: _ZNSs4_Rep10_M_disposeERKSaIcE (func__ZNSs4_Rep10_M_disposeERKSaIcE)
{
 Function::arg_iterator args = func__ZNSs4_Rep10_M_disposeERKSaIcE->arg_begin();
 Value* ptr_this = args++;
 ptr_this->setName("this");
 Value* ptr___a = args++;
 ptr___a->setName("__a");
 
 BasicBlock* label_entry_223 = BasicBlock::Create(mod->getContext(), "entry",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then_i = BasicBlock::Create(mod->getContext(), "if.then.i",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_else_i = BasicBlock::Create(mod->getContext(), "if.else.i",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_invoke_cont_224 = BasicBlock::Create(mod->getContext(), "invoke.cont",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_then4 = BasicBlock::Create(mod->getContext(), "if.then4",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 BasicBlock* label_if_end5 = BasicBlock::Create(mod->getContext(), "if.end5",func__ZNSs4_Rep10_M_disposeERKSaIcE,0);
 
 // Block entry (label_entry_223)
 ICmpInst* int1_cmp = new ICmpInst(*label_entry_223, ICmpInst::ICMP_EQ, ptr_this, const_ptr_75, "cmp");
 BranchInst::Create(label_if_end5, label_if_then, int1_cmp, label_entry_223);
 
 // Block if.then (label_if_then)
 std::vector<Value*> ptr__M_refcount_indices;
 ptr__M_refcount_indices.push_back(const_int64_58);
 ptr__M_refcount_indices.push_back(const_int32_59);
 ptr__M_refcount_indices.push_back(const_int32_76);
 Instruction* ptr__M_refcount = GetElementPtrInst::Create(ptr_this, ptr__M_refcount_indices, "_M_refcount", label_if_then);
 BranchInst::Create(label_if_then_i, label_if_else_i, const_int1_77, label_if_then);
 
 // Block if.then.i (label_if_then_i)
 AtomicRMWInst* int32_227 = new AtomicRMWInst(AtomicRMWInst::Add, ptr__M_refcount, const_int32_79, AcquireRelease, CrossThread, label_if_then_i);
 int32_227->setName("");
 int32_227->setVolatile(true);
 BranchInst::Create(label_invoke_cont_224, label_if_then_i);
 
 // Block if.else.i (label_if_else_i)
 LoadInst* int32_229 = new LoadInst(ptr__M_refcount, "", false, label_if_else_i);
 int32_229->setAlignment(4);
 BinaryOperator* int32_add_i_i = BinaryOperator::Create(Instruction::Add, int32_229, const_int32_79, "add.i.i", label_if_else_i);
 StoreInst* void_230 = new StoreInst(int32_add_i_i, ptr__M_refcount, false, label_if_else_i);
 void_230->setAlignment(4);
 BranchInst::Create(label_invoke_cont_224, label_if_else_i);
 
 // Block invoke.cont (label_invoke_cont_224)
 PHINode* int32_retval_0_i = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "retval.0.i", label_invoke_cont_224);
 int32_retval_0_i->addIncoming(int32_227, label_if_then_i);
 int32_retval_0_i->addIncoming(int32_229, label_if_else_i);
 
 ICmpInst* int1_cmp3 = new ICmpInst(*label_invoke_cont_224, ICmpInst::ICMP_SLT, int32_retval_0_i, const_int32_56, "cmp3");
 BranchInst::Create(label_if_then4, label_if_end5, int1_cmp3, label_invoke_cont_224);
 
 // Block if.then4 (label_if_then4)
 std::vector<Value*> void_233_params;
 void_233_params.push_back(ptr_this);
 void_233_params.push_back(ptr___a);
 CallInst* void_233 = CallInst::Create(func__ZNSs4_Rep10_M_destroyERKSaIcE, void_233_params, "", label_if_then4);
 void_233->setCallingConv(CallingConv::C);
 void_233->setTailCall(true);
 AttributeSet void_233_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    PAS = AttributeSet::get(mod->getContext(), 2U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::OptimizeForSize);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 void_233_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
void_233->setAttributes(void_233_PAL);

BranchInst::Create(label_if_end5, label_if_then4);

// Block if.end5 (label_if_end5)
ReturnInst::Create(mod->getContext(), label_if_end5);

}

// Function: _GLOBAL__sub_I_main.cpp (func__GLOBAL__sub_I_main_cpp)
{
 
 BasicBlock* label_entry_236 = BasicBlock::Create(mod->getContext(), "entry",func__GLOBAL__sub_I_main_cpp,0);
 
 // Block entry (label_entry_236)
 CallInst* void_237 = CallInst::Create(func__ZNSt8ios_base4InitC1Ev, gvar_struct__ZStL8__ioinit, "", label_entry_236);
 void_237->setCallingConv(CallingConv::C);
 void_237->setTailCall(true);
 AttributeSet void_237_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::OptimizeForSize);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  void_237_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 void_237->setAttributes(void_237_PAL);
 
 std::vector<Value*> int32_238_params;
 int32_238_params.push_back(const_ptr_80);
 int32_238_params.push_back(const_ptr_81);
 int32_238_params.push_back(gvar_int8___dso_handle);
 CallInst* int32_238 = CallInst::Create(func___cxa_atexit, int32_238_params, "", label_entry_236);
 int32_238->setCallingConv(CallingConv::C);
 int32_238->setTailCall(true);
 AttributeSet int32_238_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  int32_238_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 int32_238->setAttributes(int32_238_PAL);
 
 ReturnInst::Create(mod->getContext(), label_entry_236);
 
}

return mod;
}
